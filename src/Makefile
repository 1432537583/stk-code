# Makefile.in generated by automake 1.9.6 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright (C) 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002,
# 2003, 2004, 2005  Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# src/


srcdir = .
top_srcdir = ..

pkgdatadir = $(datadir)/supertuxkart
pkglibdir = $(libdir)/supertuxkart
pkgincludedir = $(includedir)/supertuxkart
top_builddir = ..
am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
build_triplet = i686-pc-linux-gnu
host_triplet = i686-pc-linux-gnu
target_triplet = i686-pc-linux-gnu
bin_PROGRAMS = supertuxkart$(EXEEXT)
subdir = src
DIST_COMMON = $(srcdir)/Makefile.am $(srcdir)/Makefile.in
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
am__aclocal_m4_deps = $(top_srcdir)/acinclude.m4 \
	$(top_srcdir)/configure.ac
am__configure_deps = $(am__aclocal_m4_deps) $(CONFIGURE_DEPENDENCIES) \
	$(ACLOCAL_M4)
mkinstalldirs = $(install_sh) -d
CONFIG_CLEAN_FILES =
LIBRARIES = $(noinst_LIBRARIES)
AR = ar
ARFLAGS = cru
libstatic_ssg_a_AR = $(AR) $(ARFLAGS)
libstatic_ssg_a_LIBADD =
am_libstatic_ssg_a_OBJECTS = libstatic_ssg_a-static_ssg.$(OBJEXT)
libstatic_ssg_a_OBJECTS = $(am_libstatic_ssg_a_OBJECTS)
am__installdirs = "$(DESTDIR)$(bindir)"
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
PROGRAMS = $(bin_PROGRAMS)
am_supertuxkart_OBJECTS = main.$(OBJEXT) material.$(OBJEXT) \
	material_manager.$(OBJEXT) attachment.$(OBJEXT) \
	collectable.$(OBJEXT) collectable_manager.$(OBJEXT) \
	sound_manager.$(OBJEXT) sound_plib.$(OBJEXT) \
	music_mikmod.$(OBJEXT) sfx_openal.$(OBJEXT) utils.$(OBJEXT) \
	isect.$(OBJEXT) track.$(OBJEXT) herring.$(OBJEXT) \
	herring_manager.$(OBJEXT) explosion.$(OBJEXT) config.$(OBJEXT) \
	cup_data.$(OBJEXT) kart_manager.$(OBJEXT) \
	projectile_manager.$(OBJEXT) kart_properties.$(OBJEXT) \
	physics_parameters.$(OBJEXT) loader.$(OBJEXT) \
	race_manager.$(OBJEXT) string_utils.$(OBJEXT) \
	track_manager.$(OBJEXT) world.$(OBJEXT) preprocessor.$(OBJEXT) \
	hook_manager.$(OBJEXT) skid_mark.$(OBJEXT) shadow.$(OBJEXT) \
	start_screen.$(OBJEXT) world_screen.$(OBJEXT) \
	empty_screen.$(OBJEXT) particle_system.$(OBJEXT) \
	screen_manager.$(OBJEXT) widget_set.$(OBJEXT) camera.$(OBJEXT) \
	plibdrv.$(OBJEXT) moveable.$(OBJEXT) kart.$(OBJEXT) \
	auto_kart.$(OBJEXT) player_kart.$(OBJEXT) projectile.$(OBJEXT) \
	history.$(OBJEXT) traffic.$(OBJEXT) lisp.$(OBJEXT) \
	lexer.$(OBJEXT) parser.$(OBJEXT) writer.$(OBJEXT) \
	menu_manager.$(OBJEXT) base_gui.$(OBJEXT) race_gui.$(OBJEXT) \
	race_results_gui.$(OBJEXT) grand_prix_ending.$(OBJEXT) \
	num_laps.$(OBJEXT) race_menu.$(OBJEXT) num_players.$(OBJEXT) \
	track_sel.$(OBJEXT) player_controls.$(OBJEXT) \
	config_display.$(OBJEXT) config_sound.$(OBJEXT) \
	config_controls.$(OBJEXT) options.$(OBJEXT) \
	game_mode.$(OBJEXT) difficulty.$(OBJEXT) char_sel.$(OBJEXT) \
	main_menu.$(OBJEXT) help_menu.$(OBJEXT) credits_menu.$(OBJEXT) \
	scrolled_text.$(OBJEXT) grand_prix_select.$(OBJEXT)
supertuxkart_OBJECTS = $(am_supertuxkart_OBJECTS)
am__DEPENDENCIES_1 =
supertuxkart_DEPENDENCIES = . $(am__DEPENDENCIES_1) \
	$(am__DEPENDENCIES_1) $(am__DEPENDENCIES_1)
DEFAULT_INCLUDES = -I. -I$(srcdir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
SOURCES = $(libstatic_ssg_a_SOURCES) $(supertuxkart_SOURCES)
DIST_SOURCES = $(libstatic_ssg_a_SOURCES) $(supertuxkart_SOURCES)
ETAGS = etags
CTAGS = ctags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)
ACLOCAL = ${SHELL} /home/coz/Proyectos/supertuxkart/trunk/missing --run aclocal-1.9
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = ${SHELL} /home/coz/Proyectos/supertuxkart/trunk/missing --run tar
AUTOCONF = ${SHELL} /home/coz/Proyectos/supertuxkart/trunk/missing --run autoconf
AUTOHEADER = ${SHELL} /home/coz/Proyectos/supertuxkart/trunk/missing --run autoheader
AUTOMAKE = ${SHELL} /home/coz/Proyectos/supertuxkart/trunk/missing --run automake-1.9
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2 -Wall -Wstrict-prototypes -Wmissing-prototypes
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2 -Wall
CYGPATH_W = echo
DEFS = -DPACKAGE_NAME=\"\" -DPACKAGE_TARNAME=\"\" -DPACKAGE_VERSION=\"\" -DPACKAGE_STRING=\"\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE=\"supertuxkart\" -DVERSION=\"0.2\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_OPENAL=1 -DHAVE_MIKMOD=1
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = /bin/grep -E
EXEEXT = 
GREP = /bin/grep
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = 
LIBMIKMOD_CFLAGS = -pthread -D_REENTRANT
LIBMIKMOD_CONFIG = /usr/bin/libmikmod-config
LIBMIKMOD_LDADD = -pthread
LIBMIKMOD_LIBS = -L/usr/lib -lmikmod
LIBOBJS = 
LIBS = 
LTLIBOBJS = 
MAKEINFO = ${SHELL} /home/coz/Proyectos/supertuxkart/trunk/missing --run makeinfo
NOREGMOVE = -fno-regmove
OBJEXT = o
PACKAGE = supertuxkart
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
VERSION = 0.2
ac_ct_CC = gcc
ac_ct_CXX = g++
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 
am__tar = ${AMTAR} chof - "$$tardir"
am__untar = ${AMTAR} xf -
bindir = ${exec_prefix}/bin
build = i686-pc-linux-gnu
build_alias = 
build_cpu = i686
build_os = linux-gnu
build_vendor = pc
datadir = ${datarootdir}
datarootdir = ${prefix}/share
docdir = ${datarootdir}/doc/${PACKAGE}
dvidir = ${docdir}
exec_prefix = ${prefix}
host = i686-pc-linux-gnu
host_alias = 
host_cpu = i686
host_os = linux-gnu
host_vendor = pc
htmldir = ${docdir}
includedir = ${prefix}/include
infodir = ${datarootdir}/info
install_sh = /home/coz/Proyectos/supertuxkart/trunk/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localedir = ${datarootdir}/locale
localstatedir = ${prefix}/var
mandir = ${datarootdir}/man
mikmod_LIBS = -lmikmod
mkdir_p = mkdir -p --
oldincludedir = /usr/include
openal_LIBS = -lalut -lopenal 
opengl_LIBS = -lGL 
pdfdir = ${docdir}
prefix = /usr/local
program_transform_name = s,x,x,
psdir = ${docdir}
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target = i686-pc-linux-gnu
target_alias = 
target_cpu = i686
target_os = linux-gnu
target_vendor = pc

# This is a VERY ugly work-around for a compiler bug: if static_ssg s compiled with -O2
# (more particularly: with -fregmove, which is part of -O2), it will causes the kart
# to fall through the tracks very easily. Therefore, static_ssg needs special compiler
# flags to work correctly.
# It might (didn't check the details) be that this is the problem reported in 
# http://gcc.gnu.org/bugzilla/show_bug.cgi?id=28146
# (which states that the problem does not happen with i686 and x86_64, which
# is what I have seen as well, it only happened on i586, not on x86_64).
#
# Since it is not possible to set compiler flags for a single .o file (see
# http://sources.redhat.com/ml/automake/2004-12/msg00063.html), I used the
# workaround provided there.
# Adding -fno-regmove works, even though it is put before the actual compiler flags,
# i.e.: -fno-regmove -g -O2, still works by disabling -fregmove.
# The configure script checks if the compiler accepts this flag, and if so, it
# will be used here.
noinst_LIBRARIES = libstatic_ssg.a
libstatic_ssg_a_SOURCES = static_ssg.cpp static_ssg.hpp
libstatic_ssg_a_CXXFLAGS = -fno-regmove
AM_CPPFLAGS = -DSUPERTUXKART_DATADIR="\"$(datadir)/games/supertuxkart/\""
supertuxkart_SOURCES = main.cpp  			\
	material.cpp		   material.hpp           	\
	material_manager.cpp	   material_manager.hpp    	\
	attachment.cpp		   attachment.hpp	        \
	collectable.cpp		   collectable.hpp	        \
	collectable_manager.cpp	   collectable_manager.hpp   	\
	sound_manager.cpp	   sound_manager.hpp                	\
	sound_plib.cpp	   sound_plib.hpp                	\
	music_mikmod.cpp	   music_mikmod.hpp                	\
	sfx_openal.cpp	   sfx_openal.hpp                	\
	utils.cpp		   utils.hpp                	\
	isect.cpp		   isect.hpp                	\
	track.cpp		   track.hpp                	\
	herring.cpp 		   herring.hpp              	\
	herring_manager.cpp	   herring_manager.hpp       	\
	explosion.cpp		   explosion.hpp            	\
	config.cpp 		   config.hpp               	\
	cup_data.cpp   		   cup_data.hpp              	\
	kart_manager.cpp	   kart_manager.hpp          	\
	projectile_manager.cpp	   projectile_manager.hpp    	\
	kart_properties.cpp	   kart_properties.hpp       	\
	physics_parameters.cpp	   physics_parameters.hpp    	\
	loader.cpp          	   loader.hpp               	\
	race_manager.cpp	   race_manager.hpp          	\
	string_utils.cpp	   string_utils.hpp          	\
	track_manager.cpp	   track_manager.hpp         	\
	world.cpp		   world.hpp                	\
	preprocessor.cpp	   preprocessor.hpp	        \
	hook_manager.cpp	   hook_manager.hpp	        \
	skid_mark.cpp		   skid_mark.hpp	        \
	shadow.cpp		   shadow.hpp	        	\
	start_screen.cpp	   start_screen.hpp	        \
	world_screen.cpp	   world_screen.hpp	        \
	empty_screen.cpp	   empty_screen.hpp	        \
	particle_system.cpp	   particle_system.hpp       	\
	screen_manager.cpp	   screen_manager.hpp        	\
	widget_set.cpp		   widget_set.hpp	        \
	camera.cpp		   camera.hpp	        	\
	plibdrv.cpp		   plibdrv.hpp	        	\
	moveable.cpp 		   moveable.hpp             	\
	kart.cpp		   kart.hpp		        \
	auto_kart.cpp		   auto_kart.hpp             	\
	player_kart.cpp		   player_kart.hpp	        \
	projectile.cpp 		   projectile.hpp	        \
	history.cpp		   history.hpp	        	\
	race_setup.hpp	   	   no_copy.hpp	        	\
	kart_control.hpp	   constants.hpp            	\
	traffic.cpp 			  	        	\
	player.hpp		   screen.hpp			\
	lisp/lisp.cpp		   lisp/lisp.hpp            	\
	lisp/lexer.cpp		   lisp/lexer.hpp           	\
	lisp/parser.cpp		   lisp/parser.hpp          	\
	lisp/writer.cpp		   lisp/writer.hpp	        \
	gui/menu_manager.cpp       gui/menu_manager.hpp     	\
	gui/base_gui.cpp	   gui/base_gui.hpp	        \
	gui/race_gui.cpp	   gui/race_gui.hpp	        \
	gui/race_results_gui.cpp   gui/race_results_gui.hpp 	\
	gui/grand_prix_ending.cpp  gui/grand_prix_ending.hpp 	\
	gui/num_laps.cpp	   gui/num_laps.hpp	        \
	gui/race_menu.cpp	   gui/race_menu.hpp	        \
	gui/num_players.cpp	   gui/num_players.hpp       	\
	gui/track_sel.cpp	   gui/track_sel.hpp	        \
	gui/player_controls.cpp	   gui/player_controls.hpp   	\
	gui/config_display.cpp	   gui/config_display.hpp    	\
	gui/config_sound.cpp	   gui/config_sound.hpp    	\
	gui/config_controls.cpp	   gui/config_controls.hpp   	\
	gui/options.cpp		   gui/options.hpp	        \
	gui/game_mode.cpp	   gui/game_mode.hpp	        \
	gui/difficulty.cpp	   gui/difficulty.hpp       	\
	gui/char_sel.cpp	   gui/char_sel.hpp	        \
	gui/main_menu.cpp	   gui/main_menu.hpp         	\
	gui/help_menu.cpp 	   gui/help_menu.hpp 	        \
	gui/credits_menu.cpp	   gui/credits_menu.hpp		\
	gui/scrolled_text.cpp	   gui/scrolled_text.hpp	\
	gui/grand_prix_select.cpp  gui/grand_prix_select.hpp


# Link in the specific gcc 4.1 bug work around
supertuxkart_LDADD = -L . -lstatic_ssg \
	-lplibjs -lplibsl -lplibssg -lplibpu -lplibfnt -lplibsg \
	-lplibpw -lplibul -lplibssgaux $(opengl_LIBS) $(openal_LIBS) $(mikmod_LIBS)

all: all-am

.SUFFIXES:
.SUFFIXES: .cpp .o .obj
$(srcdir)/Makefile.in:  $(srcdir)/Makefile.am  $(am__configure_deps)
	@for dep in $?; do \
	  case '$(am__configure_deps)' in \
	    *$$dep*) \
	      cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh \
		&& exit 0; \
	      exit 1;; \
	  esac; \
	done; \
	echo ' cd $(top_srcdir) && $(AUTOMAKE) --gnu  src/Makefile'; \
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/Makefile
.PRECIOUS: Makefile
Makefile: $(srcdir)/Makefile.in $(top_builddir)/config.status
	@case '$?' in \
	  *config.status*) \
	    cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh;; \
	  *) \
	    echo ' cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)'; \
	    cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe);; \
	esac;

$(top_builddir)/config.status: $(top_srcdir)/configure $(CONFIG_STATUS_DEPENDENCIES)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

$(top_srcdir)/configure:  $(am__configure_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh
$(ACLOCAL_M4):  $(am__aclocal_m4_deps)
	cd $(top_builddir) && $(MAKE) $(AM_MAKEFLAGS) am--refresh

clean-noinstLIBRARIES:
	-test -z "$(noinst_LIBRARIES)" || rm -f $(noinst_LIBRARIES)
libstatic_ssg.a: $(libstatic_ssg_a_OBJECTS) $(libstatic_ssg_a_DEPENDENCIES) 
	-rm -f libstatic_ssg.a
	$(libstatic_ssg_a_AR) libstatic_ssg.a $(libstatic_ssg_a_OBJECTS) $(libstatic_ssg_a_LIBADD)
	$(RANLIB) libstatic_ssg.a
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	test -z "$(bindir)" || $(mkdir_p) "$(DESTDIR)$(bindir)"
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) '$$p' '$(DESTDIR)$(bindir)/$$f'"; \
	   $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) "$$p" "$(DESTDIR)$(bindir)/$$f" || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f '$(DESTDIR)$(bindir)/$$f'"; \
	  rm -f "$(DESTDIR)$(bindir)/$$f"; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
supertuxkart$(EXEEXT): $(supertuxkart_OBJECTS) $(supertuxkart_DEPENDENCIES) 
	@rm -f supertuxkart$(EXEEXT)
	$(CXXLINK) $(supertuxkart_LDFLAGS) $(supertuxkart_OBJECTS) $(supertuxkart_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT)

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/attachment.Po
include ./$(DEPDIR)/auto_kart.Po
include ./$(DEPDIR)/base_gui.Po
include ./$(DEPDIR)/camera.Po
include ./$(DEPDIR)/char_sel.Po
include ./$(DEPDIR)/collectable.Po
include ./$(DEPDIR)/collectable_manager.Po
include ./$(DEPDIR)/config.Po
include ./$(DEPDIR)/config_controls.Po
include ./$(DEPDIR)/config_display.Po
include ./$(DEPDIR)/config_sound.Po
include ./$(DEPDIR)/credits_menu.Po
include ./$(DEPDIR)/cup_data.Po
include ./$(DEPDIR)/difficulty.Po
include ./$(DEPDIR)/empty_screen.Po
include ./$(DEPDIR)/explosion.Po
include ./$(DEPDIR)/game_mode.Po
include ./$(DEPDIR)/grand_prix_ending.Po
include ./$(DEPDIR)/grand_prix_select.Po
include ./$(DEPDIR)/help_menu.Po
include ./$(DEPDIR)/herring.Po
include ./$(DEPDIR)/herring_manager.Po
include ./$(DEPDIR)/history.Po
include ./$(DEPDIR)/hook_manager.Po
include ./$(DEPDIR)/isect.Po
include ./$(DEPDIR)/kart.Po
include ./$(DEPDIR)/kart_manager.Po
include ./$(DEPDIR)/kart_properties.Po
include ./$(DEPDIR)/lexer.Po
include ./$(DEPDIR)/libstatic_ssg_a-static_ssg.Po
include ./$(DEPDIR)/lisp.Po
include ./$(DEPDIR)/loader.Po
include ./$(DEPDIR)/main.Po
include ./$(DEPDIR)/main_menu.Po
include ./$(DEPDIR)/material.Po
include ./$(DEPDIR)/material_manager.Po
include ./$(DEPDIR)/menu_manager.Po
include ./$(DEPDIR)/moveable.Po
include ./$(DEPDIR)/music_mikmod.Po
include ./$(DEPDIR)/num_laps.Po
include ./$(DEPDIR)/num_players.Po
include ./$(DEPDIR)/options.Po
include ./$(DEPDIR)/parser.Po
include ./$(DEPDIR)/particle_system.Po
include ./$(DEPDIR)/physics_parameters.Po
include ./$(DEPDIR)/player_controls.Po
include ./$(DEPDIR)/player_kart.Po
include ./$(DEPDIR)/plibdrv.Po
include ./$(DEPDIR)/preprocessor.Po
include ./$(DEPDIR)/projectile.Po
include ./$(DEPDIR)/projectile_manager.Po
include ./$(DEPDIR)/race_gui.Po
include ./$(DEPDIR)/race_manager.Po
include ./$(DEPDIR)/race_menu.Po
include ./$(DEPDIR)/race_results_gui.Po
include ./$(DEPDIR)/screen_manager.Po
include ./$(DEPDIR)/scrolled_text.Po
include ./$(DEPDIR)/sfx_openal.Po
include ./$(DEPDIR)/shadow.Po
include ./$(DEPDIR)/skid_mark.Po
include ./$(DEPDIR)/sound_manager.Po
include ./$(DEPDIR)/sound_plib.Po
include ./$(DEPDIR)/start_screen.Po
include ./$(DEPDIR)/string_utils.Po
include ./$(DEPDIR)/track.Po
include ./$(DEPDIR)/track_manager.Po
include ./$(DEPDIR)/track_sel.Po
include ./$(DEPDIR)/traffic.Po
include ./$(DEPDIR)/utils.Po
include ./$(DEPDIR)/widget_set.Po
include ./$(DEPDIR)/world.Po
include ./$(DEPDIR)/world_screen.Po
include ./$(DEPDIR)/writer.Po

.cpp.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ $<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ $<

.cpp.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" -c -o $@ `$(CYGPATH_W) '$<'`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; fi
#	source='$<' object='$@' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `$(CYGPATH_W) '$<'`

libstatic_ssg_a-static_ssg.o: static_ssg.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libstatic_ssg_a_CXXFLAGS) $(CXXFLAGS) -MT libstatic_ssg_a-static_ssg.o -MD -MP -MF "$(DEPDIR)/libstatic_ssg_a-static_ssg.Tpo" -c -o libstatic_ssg_a-static_ssg.o `test -f 'static_ssg.cpp' || echo '$(srcdir)/'`static_ssg.cpp; \
	then mv -f "$(DEPDIR)/libstatic_ssg_a-static_ssg.Tpo" "$(DEPDIR)/libstatic_ssg_a-static_ssg.Po"; else rm -f "$(DEPDIR)/libstatic_ssg_a-static_ssg.Tpo"; exit 1; fi
#	source='static_ssg.cpp' object='libstatic_ssg_a-static_ssg.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libstatic_ssg_a_CXXFLAGS) $(CXXFLAGS) -c -o libstatic_ssg_a-static_ssg.o `test -f 'static_ssg.cpp' || echo '$(srcdir)/'`static_ssg.cpp

libstatic_ssg_a-static_ssg.obj: static_ssg.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libstatic_ssg_a_CXXFLAGS) $(CXXFLAGS) -MT libstatic_ssg_a-static_ssg.obj -MD -MP -MF "$(DEPDIR)/libstatic_ssg_a-static_ssg.Tpo" -c -o libstatic_ssg_a-static_ssg.obj `if test -f 'static_ssg.cpp'; then $(CYGPATH_W) 'static_ssg.cpp'; else $(CYGPATH_W) '$(srcdir)/static_ssg.cpp'; fi`; \
	then mv -f "$(DEPDIR)/libstatic_ssg_a-static_ssg.Tpo" "$(DEPDIR)/libstatic_ssg_a-static_ssg.Po"; else rm -f "$(DEPDIR)/libstatic_ssg_a-static_ssg.Tpo"; exit 1; fi
#	source='static_ssg.cpp' object='libstatic_ssg_a-static_ssg.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(libstatic_ssg_a_CXXFLAGS) $(CXXFLAGS) -c -o libstatic_ssg_a-static_ssg.obj `if test -f 'static_ssg.cpp'; then $(CYGPATH_W) 'static_ssg.cpp'; else $(CYGPATH_W) '$(srcdir)/static_ssg.cpp'; fi`

lisp.o: lisp/lisp.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lisp.o -MD -MP -MF "$(DEPDIR)/lisp.Tpo" -c -o lisp.o `test -f 'lisp/lisp.cpp' || echo '$(srcdir)/'`lisp/lisp.cpp; \
	then mv -f "$(DEPDIR)/lisp.Tpo" "$(DEPDIR)/lisp.Po"; else rm -f "$(DEPDIR)/lisp.Tpo"; exit 1; fi
#	source='lisp/lisp.cpp' object='lisp.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lisp.o `test -f 'lisp/lisp.cpp' || echo '$(srcdir)/'`lisp/lisp.cpp

lisp.obj: lisp/lisp.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lisp.obj -MD -MP -MF "$(DEPDIR)/lisp.Tpo" -c -o lisp.obj `if test -f 'lisp/lisp.cpp'; then $(CYGPATH_W) 'lisp/lisp.cpp'; else $(CYGPATH_W) '$(srcdir)/lisp/lisp.cpp'; fi`; \
	then mv -f "$(DEPDIR)/lisp.Tpo" "$(DEPDIR)/lisp.Po"; else rm -f "$(DEPDIR)/lisp.Tpo"; exit 1; fi
#	source='lisp/lisp.cpp' object='lisp.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lisp.obj `if test -f 'lisp/lisp.cpp'; then $(CYGPATH_W) 'lisp/lisp.cpp'; else $(CYGPATH_W) '$(srcdir)/lisp/lisp.cpp'; fi`

lexer.o: lisp/lexer.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lexer.o -MD -MP -MF "$(DEPDIR)/lexer.Tpo" -c -o lexer.o `test -f 'lisp/lexer.cpp' || echo '$(srcdir)/'`lisp/lexer.cpp; \
	then mv -f "$(DEPDIR)/lexer.Tpo" "$(DEPDIR)/lexer.Po"; else rm -f "$(DEPDIR)/lexer.Tpo"; exit 1; fi
#	source='lisp/lexer.cpp' object='lexer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lexer.o `test -f 'lisp/lexer.cpp' || echo '$(srcdir)/'`lisp/lexer.cpp

lexer.obj: lisp/lexer.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT lexer.obj -MD -MP -MF "$(DEPDIR)/lexer.Tpo" -c -o lexer.obj `if test -f 'lisp/lexer.cpp'; then $(CYGPATH_W) 'lisp/lexer.cpp'; else $(CYGPATH_W) '$(srcdir)/lisp/lexer.cpp'; fi`; \
	then mv -f "$(DEPDIR)/lexer.Tpo" "$(DEPDIR)/lexer.Po"; else rm -f "$(DEPDIR)/lexer.Tpo"; exit 1; fi
#	source='lisp/lexer.cpp' object='lexer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o lexer.obj `if test -f 'lisp/lexer.cpp'; then $(CYGPATH_W) 'lisp/lexer.cpp'; else $(CYGPATH_W) '$(srcdir)/lisp/lexer.cpp'; fi`

parser.o: lisp/parser.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT parser.o -MD -MP -MF "$(DEPDIR)/parser.Tpo" -c -o parser.o `test -f 'lisp/parser.cpp' || echo '$(srcdir)/'`lisp/parser.cpp; \
	then mv -f "$(DEPDIR)/parser.Tpo" "$(DEPDIR)/parser.Po"; else rm -f "$(DEPDIR)/parser.Tpo"; exit 1; fi
#	source='lisp/parser.cpp' object='parser.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o parser.o `test -f 'lisp/parser.cpp' || echo '$(srcdir)/'`lisp/parser.cpp

parser.obj: lisp/parser.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT parser.obj -MD -MP -MF "$(DEPDIR)/parser.Tpo" -c -o parser.obj `if test -f 'lisp/parser.cpp'; then $(CYGPATH_W) 'lisp/parser.cpp'; else $(CYGPATH_W) '$(srcdir)/lisp/parser.cpp'; fi`; \
	then mv -f "$(DEPDIR)/parser.Tpo" "$(DEPDIR)/parser.Po"; else rm -f "$(DEPDIR)/parser.Tpo"; exit 1; fi
#	source='lisp/parser.cpp' object='parser.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o parser.obj `if test -f 'lisp/parser.cpp'; then $(CYGPATH_W) 'lisp/parser.cpp'; else $(CYGPATH_W) '$(srcdir)/lisp/parser.cpp'; fi`

writer.o: lisp/writer.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT writer.o -MD -MP -MF "$(DEPDIR)/writer.Tpo" -c -o writer.o `test -f 'lisp/writer.cpp' || echo '$(srcdir)/'`lisp/writer.cpp; \
	then mv -f "$(DEPDIR)/writer.Tpo" "$(DEPDIR)/writer.Po"; else rm -f "$(DEPDIR)/writer.Tpo"; exit 1; fi
#	source='lisp/writer.cpp' object='writer.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o writer.o `test -f 'lisp/writer.cpp' || echo '$(srcdir)/'`lisp/writer.cpp

writer.obj: lisp/writer.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT writer.obj -MD -MP -MF "$(DEPDIR)/writer.Tpo" -c -o writer.obj `if test -f 'lisp/writer.cpp'; then $(CYGPATH_W) 'lisp/writer.cpp'; else $(CYGPATH_W) '$(srcdir)/lisp/writer.cpp'; fi`; \
	then mv -f "$(DEPDIR)/writer.Tpo" "$(DEPDIR)/writer.Po"; else rm -f "$(DEPDIR)/writer.Tpo"; exit 1; fi
#	source='lisp/writer.cpp' object='writer.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o writer.obj `if test -f 'lisp/writer.cpp'; then $(CYGPATH_W) 'lisp/writer.cpp'; else $(CYGPATH_W) '$(srcdir)/lisp/writer.cpp'; fi`

menu_manager.o: gui/menu_manager.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT menu_manager.o -MD -MP -MF "$(DEPDIR)/menu_manager.Tpo" -c -o menu_manager.o `test -f 'gui/menu_manager.cpp' || echo '$(srcdir)/'`gui/menu_manager.cpp; \
	then mv -f "$(DEPDIR)/menu_manager.Tpo" "$(DEPDIR)/menu_manager.Po"; else rm -f "$(DEPDIR)/menu_manager.Tpo"; exit 1; fi
#	source='gui/menu_manager.cpp' object='menu_manager.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o menu_manager.o `test -f 'gui/menu_manager.cpp' || echo '$(srcdir)/'`gui/menu_manager.cpp

menu_manager.obj: gui/menu_manager.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT menu_manager.obj -MD -MP -MF "$(DEPDIR)/menu_manager.Tpo" -c -o menu_manager.obj `if test -f 'gui/menu_manager.cpp'; then $(CYGPATH_W) 'gui/menu_manager.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/menu_manager.cpp'; fi`; \
	then mv -f "$(DEPDIR)/menu_manager.Tpo" "$(DEPDIR)/menu_manager.Po"; else rm -f "$(DEPDIR)/menu_manager.Tpo"; exit 1; fi
#	source='gui/menu_manager.cpp' object='menu_manager.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o menu_manager.obj `if test -f 'gui/menu_manager.cpp'; then $(CYGPATH_W) 'gui/menu_manager.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/menu_manager.cpp'; fi`

base_gui.o: gui/base_gui.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT base_gui.o -MD -MP -MF "$(DEPDIR)/base_gui.Tpo" -c -o base_gui.o `test -f 'gui/base_gui.cpp' || echo '$(srcdir)/'`gui/base_gui.cpp; \
	then mv -f "$(DEPDIR)/base_gui.Tpo" "$(DEPDIR)/base_gui.Po"; else rm -f "$(DEPDIR)/base_gui.Tpo"; exit 1; fi
#	source='gui/base_gui.cpp' object='base_gui.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o base_gui.o `test -f 'gui/base_gui.cpp' || echo '$(srcdir)/'`gui/base_gui.cpp

base_gui.obj: gui/base_gui.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT base_gui.obj -MD -MP -MF "$(DEPDIR)/base_gui.Tpo" -c -o base_gui.obj `if test -f 'gui/base_gui.cpp'; then $(CYGPATH_W) 'gui/base_gui.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/base_gui.cpp'; fi`; \
	then mv -f "$(DEPDIR)/base_gui.Tpo" "$(DEPDIR)/base_gui.Po"; else rm -f "$(DEPDIR)/base_gui.Tpo"; exit 1; fi
#	source='gui/base_gui.cpp' object='base_gui.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o base_gui.obj `if test -f 'gui/base_gui.cpp'; then $(CYGPATH_W) 'gui/base_gui.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/base_gui.cpp'; fi`

race_gui.o: gui/race_gui.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT race_gui.o -MD -MP -MF "$(DEPDIR)/race_gui.Tpo" -c -o race_gui.o `test -f 'gui/race_gui.cpp' || echo '$(srcdir)/'`gui/race_gui.cpp; \
	then mv -f "$(DEPDIR)/race_gui.Tpo" "$(DEPDIR)/race_gui.Po"; else rm -f "$(DEPDIR)/race_gui.Tpo"; exit 1; fi
#	source='gui/race_gui.cpp' object='race_gui.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o race_gui.o `test -f 'gui/race_gui.cpp' || echo '$(srcdir)/'`gui/race_gui.cpp

race_gui.obj: gui/race_gui.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT race_gui.obj -MD -MP -MF "$(DEPDIR)/race_gui.Tpo" -c -o race_gui.obj `if test -f 'gui/race_gui.cpp'; then $(CYGPATH_W) 'gui/race_gui.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/race_gui.cpp'; fi`; \
	then mv -f "$(DEPDIR)/race_gui.Tpo" "$(DEPDIR)/race_gui.Po"; else rm -f "$(DEPDIR)/race_gui.Tpo"; exit 1; fi
#	source='gui/race_gui.cpp' object='race_gui.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o race_gui.obj `if test -f 'gui/race_gui.cpp'; then $(CYGPATH_W) 'gui/race_gui.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/race_gui.cpp'; fi`

race_results_gui.o: gui/race_results_gui.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT race_results_gui.o -MD -MP -MF "$(DEPDIR)/race_results_gui.Tpo" -c -o race_results_gui.o `test -f 'gui/race_results_gui.cpp' || echo '$(srcdir)/'`gui/race_results_gui.cpp; \
	then mv -f "$(DEPDIR)/race_results_gui.Tpo" "$(DEPDIR)/race_results_gui.Po"; else rm -f "$(DEPDIR)/race_results_gui.Tpo"; exit 1; fi
#	source='gui/race_results_gui.cpp' object='race_results_gui.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o race_results_gui.o `test -f 'gui/race_results_gui.cpp' || echo '$(srcdir)/'`gui/race_results_gui.cpp

race_results_gui.obj: gui/race_results_gui.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT race_results_gui.obj -MD -MP -MF "$(DEPDIR)/race_results_gui.Tpo" -c -o race_results_gui.obj `if test -f 'gui/race_results_gui.cpp'; then $(CYGPATH_W) 'gui/race_results_gui.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/race_results_gui.cpp'; fi`; \
	then mv -f "$(DEPDIR)/race_results_gui.Tpo" "$(DEPDIR)/race_results_gui.Po"; else rm -f "$(DEPDIR)/race_results_gui.Tpo"; exit 1; fi
#	source='gui/race_results_gui.cpp' object='race_results_gui.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o race_results_gui.obj `if test -f 'gui/race_results_gui.cpp'; then $(CYGPATH_W) 'gui/race_results_gui.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/race_results_gui.cpp'; fi`

grand_prix_ending.o: gui/grand_prix_ending.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT grand_prix_ending.o -MD -MP -MF "$(DEPDIR)/grand_prix_ending.Tpo" -c -o grand_prix_ending.o `test -f 'gui/grand_prix_ending.cpp' || echo '$(srcdir)/'`gui/grand_prix_ending.cpp; \
	then mv -f "$(DEPDIR)/grand_prix_ending.Tpo" "$(DEPDIR)/grand_prix_ending.Po"; else rm -f "$(DEPDIR)/grand_prix_ending.Tpo"; exit 1; fi
#	source='gui/grand_prix_ending.cpp' object='grand_prix_ending.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o grand_prix_ending.o `test -f 'gui/grand_prix_ending.cpp' || echo '$(srcdir)/'`gui/grand_prix_ending.cpp

grand_prix_ending.obj: gui/grand_prix_ending.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT grand_prix_ending.obj -MD -MP -MF "$(DEPDIR)/grand_prix_ending.Tpo" -c -o grand_prix_ending.obj `if test -f 'gui/grand_prix_ending.cpp'; then $(CYGPATH_W) 'gui/grand_prix_ending.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/grand_prix_ending.cpp'; fi`; \
	then mv -f "$(DEPDIR)/grand_prix_ending.Tpo" "$(DEPDIR)/grand_prix_ending.Po"; else rm -f "$(DEPDIR)/grand_prix_ending.Tpo"; exit 1; fi
#	source='gui/grand_prix_ending.cpp' object='grand_prix_ending.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o grand_prix_ending.obj `if test -f 'gui/grand_prix_ending.cpp'; then $(CYGPATH_W) 'gui/grand_prix_ending.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/grand_prix_ending.cpp'; fi`

num_laps.o: gui/num_laps.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT num_laps.o -MD -MP -MF "$(DEPDIR)/num_laps.Tpo" -c -o num_laps.o `test -f 'gui/num_laps.cpp' || echo '$(srcdir)/'`gui/num_laps.cpp; \
	then mv -f "$(DEPDIR)/num_laps.Tpo" "$(DEPDIR)/num_laps.Po"; else rm -f "$(DEPDIR)/num_laps.Tpo"; exit 1; fi
#	source='gui/num_laps.cpp' object='num_laps.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o num_laps.o `test -f 'gui/num_laps.cpp' || echo '$(srcdir)/'`gui/num_laps.cpp

num_laps.obj: gui/num_laps.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT num_laps.obj -MD -MP -MF "$(DEPDIR)/num_laps.Tpo" -c -o num_laps.obj `if test -f 'gui/num_laps.cpp'; then $(CYGPATH_W) 'gui/num_laps.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/num_laps.cpp'; fi`; \
	then mv -f "$(DEPDIR)/num_laps.Tpo" "$(DEPDIR)/num_laps.Po"; else rm -f "$(DEPDIR)/num_laps.Tpo"; exit 1; fi
#	source='gui/num_laps.cpp' object='num_laps.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o num_laps.obj `if test -f 'gui/num_laps.cpp'; then $(CYGPATH_W) 'gui/num_laps.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/num_laps.cpp'; fi`

race_menu.o: gui/race_menu.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT race_menu.o -MD -MP -MF "$(DEPDIR)/race_menu.Tpo" -c -o race_menu.o `test -f 'gui/race_menu.cpp' || echo '$(srcdir)/'`gui/race_menu.cpp; \
	then mv -f "$(DEPDIR)/race_menu.Tpo" "$(DEPDIR)/race_menu.Po"; else rm -f "$(DEPDIR)/race_menu.Tpo"; exit 1; fi
#	source='gui/race_menu.cpp' object='race_menu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o race_menu.o `test -f 'gui/race_menu.cpp' || echo '$(srcdir)/'`gui/race_menu.cpp

race_menu.obj: gui/race_menu.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT race_menu.obj -MD -MP -MF "$(DEPDIR)/race_menu.Tpo" -c -o race_menu.obj `if test -f 'gui/race_menu.cpp'; then $(CYGPATH_W) 'gui/race_menu.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/race_menu.cpp'; fi`; \
	then mv -f "$(DEPDIR)/race_menu.Tpo" "$(DEPDIR)/race_menu.Po"; else rm -f "$(DEPDIR)/race_menu.Tpo"; exit 1; fi
#	source='gui/race_menu.cpp' object='race_menu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o race_menu.obj `if test -f 'gui/race_menu.cpp'; then $(CYGPATH_W) 'gui/race_menu.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/race_menu.cpp'; fi`

num_players.o: gui/num_players.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT num_players.o -MD -MP -MF "$(DEPDIR)/num_players.Tpo" -c -o num_players.o `test -f 'gui/num_players.cpp' || echo '$(srcdir)/'`gui/num_players.cpp; \
	then mv -f "$(DEPDIR)/num_players.Tpo" "$(DEPDIR)/num_players.Po"; else rm -f "$(DEPDIR)/num_players.Tpo"; exit 1; fi
#	source='gui/num_players.cpp' object='num_players.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o num_players.o `test -f 'gui/num_players.cpp' || echo '$(srcdir)/'`gui/num_players.cpp

num_players.obj: gui/num_players.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT num_players.obj -MD -MP -MF "$(DEPDIR)/num_players.Tpo" -c -o num_players.obj `if test -f 'gui/num_players.cpp'; then $(CYGPATH_W) 'gui/num_players.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/num_players.cpp'; fi`; \
	then mv -f "$(DEPDIR)/num_players.Tpo" "$(DEPDIR)/num_players.Po"; else rm -f "$(DEPDIR)/num_players.Tpo"; exit 1; fi
#	source='gui/num_players.cpp' object='num_players.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o num_players.obj `if test -f 'gui/num_players.cpp'; then $(CYGPATH_W) 'gui/num_players.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/num_players.cpp'; fi`

track_sel.o: gui/track_sel.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT track_sel.o -MD -MP -MF "$(DEPDIR)/track_sel.Tpo" -c -o track_sel.o `test -f 'gui/track_sel.cpp' || echo '$(srcdir)/'`gui/track_sel.cpp; \
	then mv -f "$(DEPDIR)/track_sel.Tpo" "$(DEPDIR)/track_sel.Po"; else rm -f "$(DEPDIR)/track_sel.Tpo"; exit 1; fi
#	source='gui/track_sel.cpp' object='track_sel.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o track_sel.o `test -f 'gui/track_sel.cpp' || echo '$(srcdir)/'`gui/track_sel.cpp

track_sel.obj: gui/track_sel.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT track_sel.obj -MD -MP -MF "$(DEPDIR)/track_sel.Tpo" -c -o track_sel.obj `if test -f 'gui/track_sel.cpp'; then $(CYGPATH_W) 'gui/track_sel.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/track_sel.cpp'; fi`; \
	then mv -f "$(DEPDIR)/track_sel.Tpo" "$(DEPDIR)/track_sel.Po"; else rm -f "$(DEPDIR)/track_sel.Tpo"; exit 1; fi
#	source='gui/track_sel.cpp' object='track_sel.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o track_sel.obj `if test -f 'gui/track_sel.cpp'; then $(CYGPATH_W) 'gui/track_sel.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/track_sel.cpp'; fi`

player_controls.o: gui/player_controls.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT player_controls.o -MD -MP -MF "$(DEPDIR)/player_controls.Tpo" -c -o player_controls.o `test -f 'gui/player_controls.cpp' || echo '$(srcdir)/'`gui/player_controls.cpp; \
	then mv -f "$(DEPDIR)/player_controls.Tpo" "$(DEPDIR)/player_controls.Po"; else rm -f "$(DEPDIR)/player_controls.Tpo"; exit 1; fi
#	source='gui/player_controls.cpp' object='player_controls.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o player_controls.o `test -f 'gui/player_controls.cpp' || echo '$(srcdir)/'`gui/player_controls.cpp

player_controls.obj: gui/player_controls.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT player_controls.obj -MD -MP -MF "$(DEPDIR)/player_controls.Tpo" -c -o player_controls.obj `if test -f 'gui/player_controls.cpp'; then $(CYGPATH_W) 'gui/player_controls.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/player_controls.cpp'; fi`; \
	then mv -f "$(DEPDIR)/player_controls.Tpo" "$(DEPDIR)/player_controls.Po"; else rm -f "$(DEPDIR)/player_controls.Tpo"; exit 1; fi
#	source='gui/player_controls.cpp' object='player_controls.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o player_controls.obj `if test -f 'gui/player_controls.cpp'; then $(CYGPATH_W) 'gui/player_controls.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/player_controls.cpp'; fi`

config_display.o: gui/config_display.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT config_display.o -MD -MP -MF "$(DEPDIR)/config_display.Tpo" -c -o config_display.o `test -f 'gui/config_display.cpp' || echo '$(srcdir)/'`gui/config_display.cpp; \
	then mv -f "$(DEPDIR)/config_display.Tpo" "$(DEPDIR)/config_display.Po"; else rm -f "$(DEPDIR)/config_display.Tpo"; exit 1; fi
#	source='gui/config_display.cpp' object='config_display.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o config_display.o `test -f 'gui/config_display.cpp' || echo '$(srcdir)/'`gui/config_display.cpp

config_display.obj: gui/config_display.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT config_display.obj -MD -MP -MF "$(DEPDIR)/config_display.Tpo" -c -o config_display.obj `if test -f 'gui/config_display.cpp'; then $(CYGPATH_W) 'gui/config_display.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/config_display.cpp'; fi`; \
	then mv -f "$(DEPDIR)/config_display.Tpo" "$(DEPDIR)/config_display.Po"; else rm -f "$(DEPDIR)/config_display.Tpo"; exit 1; fi
#	source='gui/config_display.cpp' object='config_display.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o config_display.obj `if test -f 'gui/config_display.cpp'; then $(CYGPATH_W) 'gui/config_display.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/config_display.cpp'; fi`

config_sound.o: gui/config_sound.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT config_sound.o -MD -MP -MF "$(DEPDIR)/config_sound.Tpo" -c -o config_sound.o `test -f 'gui/config_sound.cpp' || echo '$(srcdir)/'`gui/config_sound.cpp; \
	then mv -f "$(DEPDIR)/config_sound.Tpo" "$(DEPDIR)/config_sound.Po"; else rm -f "$(DEPDIR)/config_sound.Tpo"; exit 1; fi
#	source='gui/config_sound.cpp' object='config_sound.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o config_sound.o `test -f 'gui/config_sound.cpp' || echo '$(srcdir)/'`gui/config_sound.cpp

config_sound.obj: gui/config_sound.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT config_sound.obj -MD -MP -MF "$(DEPDIR)/config_sound.Tpo" -c -o config_sound.obj `if test -f 'gui/config_sound.cpp'; then $(CYGPATH_W) 'gui/config_sound.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/config_sound.cpp'; fi`; \
	then mv -f "$(DEPDIR)/config_sound.Tpo" "$(DEPDIR)/config_sound.Po"; else rm -f "$(DEPDIR)/config_sound.Tpo"; exit 1; fi
#	source='gui/config_sound.cpp' object='config_sound.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o config_sound.obj `if test -f 'gui/config_sound.cpp'; then $(CYGPATH_W) 'gui/config_sound.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/config_sound.cpp'; fi`

config_controls.o: gui/config_controls.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT config_controls.o -MD -MP -MF "$(DEPDIR)/config_controls.Tpo" -c -o config_controls.o `test -f 'gui/config_controls.cpp' || echo '$(srcdir)/'`gui/config_controls.cpp; \
	then mv -f "$(DEPDIR)/config_controls.Tpo" "$(DEPDIR)/config_controls.Po"; else rm -f "$(DEPDIR)/config_controls.Tpo"; exit 1; fi
#	source='gui/config_controls.cpp' object='config_controls.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o config_controls.o `test -f 'gui/config_controls.cpp' || echo '$(srcdir)/'`gui/config_controls.cpp

config_controls.obj: gui/config_controls.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT config_controls.obj -MD -MP -MF "$(DEPDIR)/config_controls.Tpo" -c -o config_controls.obj `if test -f 'gui/config_controls.cpp'; then $(CYGPATH_W) 'gui/config_controls.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/config_controls.cpp'; fi`; \
	then mv -f "$(DEPDIR)/config_controls.Tpo" "$(DEPDIR)/config_controls.Po"; else rm -f "$(DEPDIR)/config_controls.Tpo"; exit 1; fi
#	source='gui/config_controls.cpp' object='config_controls.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o config_controls.obj `if test -f 'gui/config_controls.cpp'; then $(CYGPATH_W) 'gui/config_controls.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/config_controls.cpp'; fi`

options.o: gui/options.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT options.o -MD -MP -MF "$(DEPDIR)/options.Tpo" -c -o options.o `test -f 'gui/options.cpp' || echo '$(srcdir)/'`gui/options.cpp; \
	then mv -f "$(DEPDIR)/options.Tpo" "$(DEPDIR)/options.Po"; else rm -f "$(DEPDIR)/options.Tpo"; exit 1; fi
#	source='gui/options.cpp' object='options.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o options.o `test -f 'gui/options.cpp' || echo '$(srcdir)/'`gui/options.cpp

options.obj: gui/options.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT options.obj -MD -MP -MF "$(DEPDIR)/options.Tpo" -c -o options.obj `if test -f 'gui/options.cpp'; then $(CYGPATH_W) 'gui/options.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/options.cpp'; fi`; \
	then mv -f "$(DEPDIR)/options.Tpo" "$(DEPDIR)/options.Po"; else rm -f "$(DEPDIR)/options.Tpo"; exit 1; fi
#	source='gui/options.cpp' object='options.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o options.obj `if test -f 'gui/options.cpp'; then $(CYGPATH_W) 'gui/options.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/options.cpp'; fi`

game_mode.o: gui/game_mode.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT game_mode.o -MD -MP -MF "$(DEPDIR)/game_mode.Tpo" -c -o game_mode.o `test -f 'gui/game_mode.cpp' || echo '$(srcdir)/'`gui/game_mode.cpp; \
	then mv -f "$(DEPDIR)/game_mode.Tpo" "$(DEPDIR)/game_mode.Po"; else rm -f "$(DEPDIR)/game_mode.Tpo"; exit 1; fi
#	source='gui/game_mode.cpp' object='game_mode.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o game_mode.o `test -f 'gui/game_mode.cpp' || echo '$(srcdir)/'`gui/game_mode.cpp

game_mode.obj: gui/game_mode.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT game_mode.obj -MD -MP -MF "$(DEPDIR)/game_mode.Tpo" -c -o game_mode.obj `if test -f 'gui/game_mode.cpp'; then $(CYGPATH_W) 'gui/game_mode.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/game_mode.cpp'; fi`; \
	then mv -f "$(DEPDIR)/game_mode.Tpo" "$(DEPDIR)/game_mode.Po"; else rm -f "$(DEPDIR)/game_mode.Tpo"; exit 1; fi
#	source='gui/game_mode.cpp' object='game_mode.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o game_mode.obj `if test -f 'gui/game_mode.cpp'; then $(CYGPATH_W) 'gui/game_mode.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/game_mode.cpp'; fi`

difficulty.o: gui/difficulty.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT difficulty.o -MD -MP -MF "$(DEPDIR)/difficulty.Tpo" -c -o difficulty.o `test -f 'gui/difficulty.cpp' || echo '$(srcdir)/'`gui/difficulty.cpp; \
	then mv -f "$(DEPDIR)/difficulty.Tpo" "$(DEPDIR)/difficulty.Po"; else rm -f "$(DEPDIR)/difficulty.Tpo"; exit 1; fi
#	source='gui/difficulty.cpp' object='difficulty.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o difficulty.o `test -f 'gui/difficulty.cpp' || echo '$(srcdir)/'`gui/difficulty.cpp

difficulty.obj: gui/difficulty.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT difficulty.obj -MD -MP -MF "$(DEPDIR)/difficulty.Tpo" -c -o difficulty.obj `if test -f 'gui/difficulty.cpp'; then $(CYGPATH_W) 'gui/difficulty.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/difficulty.cpp'; fi`; \
	then mv -f "$(DEPDIR)/difficulty.Tpo" "$(DEPDIR)/difficulty.Po"; else rm -f "$(DEPDIR)/difficulty.Tpo"; exit 1; fi
#	source='gui/difficulty.cpp' object='difficulty.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o difficulty.obj `if test -f 'gui/difficulty.cpp'; then $(CYGPATH_W) 'gui/difficulty.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/difficulty.cpp'; fi`

char_sel.o: gui/char_sel.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT char_sel.o -MD -MP -MF "$(DEPDIR)/char_sel.Tpo" -c -o char_sel.o `test -f 'gui/char_sel.cpp' || echo '$(srcdir)/'`gui/char_sel.cpp; \
	then mv -f "$(DEPDIR)/char_sel.Tpo" "$(DEPDIR)/char_sel.Po"; else rm -f "$(DEPDIR)/char_sel.Tpo"; exit 1; fi
#	source='gui/char_sel.cpp' object='char_sel.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o char_sel.o `test -f 'gui/char_sel.cpp' || echo '$(srcdir)/'`gui/char_sel.cpp

char_sel.obj: gui/char_sel.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT char_sel.obj -MD -MP -MF "$(DEPDIR)/char_sel.Tpo" -c -o char_sel.obj `if test -f 'gui/char_sel.cpp'; then $(CYGPATH_W) 'gui/char_sel.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/char_sel.cpp'; fi`; \
	then mv -f "$(DEPDIR)/char_sel.Tpo" "$(DEPDIR)/char_sel.Po"; else rm -f "$(DEPDIR)/char_sel.Tpo"; exit 1; fi
#	source='gui/char_sel.cpp' object='char_sel.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o char_sel.obj `if test -f 'gui/char_sel.cpp'; then $(CYGPATH_W) 'gui/char_sel.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/char_sel.cpp'; fi`

main_menu.o: gui/main_menu.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT main_menu.o -MD -MP -MF "$(DEPDIR)/main_menu.Tpo" -c -o main_menu.o `test -f 'gui/main_menu.cpp' || echo '$(srcdir)/'`gui/main_menu.cpp; \
	then mv -f "$(DEPDIR)/main_menu.Tpo" "$(DEPDIR)/main_menu.Po"; else rm -f "$(DEPDIR)/main_menu.Tpo"; exit 1; fi
#	source='gui/main_menu.cpp' object='main_menu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o main_menu.o `test -f 'gui/main_menu.cpp' || echo '$(srcdir)/'`gui/main_menu.cpp

main_menu.obj: gui/main_menu.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT main_menu.obj -MD -MP -MF "$(DEPDIR)/main_menu.Tpo" -c -o main_menu.obj `if test -f 'gui/main_menu.cpp'; then $(CYGPATH_W) 'gui/main_menu.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/main_menu.cpp'; fi`; \
	then mv -f "$(DEPDIR)/main_menu.Tpo" "$(DEPDIR)/main_menu.Po"; else rm -f "$(DEPDIR)/main_menu.Tpo"; exit 1; fi
#	source='gui/main_menu.cpp' object='main_menu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o main_menu.obj `if test -f 'gui/main_menu.cpp'; then $(CYGPATH_W) 'gui/main_menu.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/main_menu.cpp'; fi`

help_menu.o: gui/help_menu.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT help_menu.o -MD -MP -MF "$(DEPDIR)/help_menu.Tpo" -c -o help_menu.o `test -f 'gui/help_menu.cpp' || echo '$(srcdir)/'`gui/help_menu.cpp; \
	then mv -f "$(DEPDIR)/help_menu.Tpo" "$(DEPDIR)/help_menu.Po"; else rm -f "$(DEPDIR)/help_menu.Tpo"; exit 1; fi
#	source='gui/help_menu.cpp' object='help_menu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o help_menu.o `test -f 'gui/help_menu.cpp' || echo '$(srcdir)/'`gui/help_menu.cpp

help_menu.obj: gui/help_menu.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT help_menu.obj -MD -MP -MF "$(DEPDIR)/help_menu.Tpo" -c -o help_menu.obj `if test -f 'gui/help_menu.cpp'; then $(CYGPATH_W) 'gui/help_menu.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/help_menu.cpp'; fi`; \
	then mv -f "$(DEPDIR)/help_menu.Tpo" "$(DEPDIR)/help_menu.Po"; else rm -f "$(DEPDIR)/help_menu.Tpo"; exit 1; fi
#	source='gui/help_menu.cpp' object='help_menu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o help_menu.obj `if test -f 'gui/help_menu.cpp'; then $(CYGPATH_W) 'gui/help_menu.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/help_menu.cpp'; fi`

credits_menu.o: gui/credits_menu.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT credits_menu.o -MD -MP -MF "$(DEPDIR)/credits_menu.Tpo" -c -o credits_menu.o `test -f 'gui/credits_menu.cpp' || echo '$(srcdir)/'`gui/credits_menu.cpp; \
	then mv -f "$(DEPDIR)/credits_menu.Tpo" "$(DEPDIR)/credits_menu.Po"; else rm -f "$(DEPDIR)/credits_menu.Tpo"; exit 1; fi
#	source='gui/credits_menu.cpp' object='credits_menu.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o credits_menu.o `test -f 'gui/credits_menu.cpp' || echo '$(srcdir)/'`gui/credits_menu.cpp

credits_menu.obj: gui/credits_menu.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT credits_menu.obj -MD -MP -MF "$(DEPDIR)/credits_menu.Tpo" -c -o credits_menu.obj `if test -f 'gui/credits_menu.cpp'; then $(CYGPATH_W) 'gui/credits_menu.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/credits_menu.cpp'; fi`; \
	then mv -f "$(DEPDIR)/credits_menu.Tpo" "$(DEPDIR)/credits_menu.Po"; else rm -f "$(DEPDIR)/credits_menu.Tpo"; exit 1; fi
#	source='gui/credits_menu.cpp' object='credits_menu.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o credits_menu.obj `if test -f 'gui/credits_menu.cpp'; then $(CYGPATH_W) 'gui/credits_menu.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/credits_menu.cpp'; fi`

scrolled_text.o: gui/scrolled_text.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT scrolled_text.o -MD -MP -MF "$(DEPDIR)/scrolled_text.Tpo" -c -o scrolled_text.o `test -f 'gui/scrolled_text.cpp' || echo '$(srcdir)/'`gui/scrolled_text.cpp; \
	then mv -f "$(DEPDIR)/scrolled_text.Tpo" "$(DEPDIR)/scrolled_text.Po"; else rm -f "$(DEPDIR)/scrolled_text.Tpo"; exit 1; fi
#	source='gui/scrolled_text.cpp' object='scrolled_text.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o scrolled_text.o `test -f 'gui/scrolled_text.cpp' || echo '$(srcdir)/'`gui/scrolled_text.cpp

scrolled_text.obj: gui/scrolled_text.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT scrolled_text.obj -MD -MP -MF "$(DEPDIR)/scrolled_text.Tpo" -c -o scrolled_text.obj `if test -f 'gui/scrolled_text.cpp'; then $(CYGPATH_W) 'gui/scrolled_text.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/scrolled_text.cpp'; fi`; \
	then mv -f "$(DEPDIR)/scrolled_text.Tpo" "$(DEPDIR)/scrolled_text.Po"; else rm -f "$(DEPDIR)/scrolled_text.Tpo"; exit 1; fi
#	source='gui/scrolled_text.cpp' object='scrolled_text.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o scrolled_text.obj `if test -f 'gui/scrolled_text.cpp'; then $(CYGPATH_W) 'gui/scrolled_text.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/scrolled_text.cpp'; fi`

grand_prix_select.o: gui/grand_prix_select.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT grand_prix_select.o -MD -MP -MF "$(DEPDIR)/grand_prix_select.Tpo" -c -o grand_prix_select.o `test -f 'gui/grand_prix_select.cpp' || echo '$(srcdir)/'`gui/grand_prix_select.cpp; \
	then mv -f "$(DEPDIR)/grand_prix_select.Tpo" "$(DEPDIR)/grand_prix_select.Po"; else rm -f "$(DEPDIR)/grand_prix_select.Tpo"; exit 1; fi
#	source='gui/grand_prix_select.cpp' object='grand_prix_select.o' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o grand_prix_select.o `test -f 'gui/grand_prix_select.cpp' || echo '$(srcdir)/'`gui/grand_prix_select.cpp

grand_prix_select.obj: gui/grand_prix_select.cpp
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT grand_prix_select.obj -MD -MP -MF "$(DEPDIR)/grand_prix_select.Tpo" -c -o grand_prix_select.obj `if test -f 'gui/grand_prix_select.cpp'; then $(CYGPATH_W) 'gui/grand_prix_select.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/grand_prix_select.cpp'; fi`; \
	then mv -f "$(DEPDIR)/grand_prix_select.Tpo" "$(DEPDIR)/grand_prix_select.Po"; else rm -f "$(DEPDIR)/grand_prix_select.Tpo"; exit 1; fi
#	source='gui/grand_prix_select.cpp' object='grand_prix_select.obj' libtool=no \
#	DEPDIR=$(DEPDIR) $(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o grand_prix_select.obj `if test -f 'gui/grand_prix_select.cpp'; then $(CYGPATH_W) 'gui/grand_prix_select.cpp'; else $(CYGPATH_W) '$(srcdir)/gui/grand_prix_select.cpp'; fi`
uninstall-info-am:

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique
tags: TAGS

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	if test -z "$(ETAGS_ARGS)$$tags$$unique"; then :; else \
	  test -n "$$unique" || unique=$$empty_fix; \
	  $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	    $$tags $$unique; \
	fi
ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkdir_p) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(LIBRARIES) $(PROGRAMS)
installdirs:
	for dir in "$(DESTDIR)$(bindir)"; do \
	  test -z "$$dir" || $(mkdir_p) "$$dir"; \
	done
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-test -z "$(CONFIG_CLEAN_FILES)" || rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic clean-noinstLIBRARIES \
	mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

html: html-am

info: info-am

info-am:

install-data-am:

install-exec-am: install-binPROGRAMS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic clean-noinstLIBRARIES ctags distclean \
	distclean-compile distclean-generic distclean-tags distdir dvi \
	dvi-am html html-am info info-am install install-am \
	install-binPROGRAMS install-data install-data-am install-exec \
	install-exec-am install-info install-info-am install-man \
	install-strip installcheck installcheck-am installdirs \
	maintainer-clean maintainer-clean-generic mostlyclean \
	mostlyclean-compile mostlyclean-generic pdf pdf-am ps ps-am \
	tags uninstall uninstall-am uninstall-binPROGRAMS \
	uninstall-info-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
