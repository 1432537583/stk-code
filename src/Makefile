# Makefile.in generated by automake 1.7.9 from Makefile.am.
# src/Makefile.  Generated from Makefile.in by configure.

# Copyright 1994, 1995, 1996, 1997, 1998, 1999, 2000, 2001, 2002, 2003
# Free Software Foundation, Inc.
# This Makefile.in is free software; the Free Software Foundation
# gives unlimited permission to copy and/or distribute it,
# with or without modifications, as long as this notice is preserved.

# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY, to the extent permitted by law; without
# even the implied warranty of MERCHANTABILITY or FITNESS FOR A
# PARTICULAR PURPOSE.



# src/

srcdir = .
top_srcdir = ..

pkgdatadir = $(datadir)/tuxkart
pkglibdir = $(libdir)/tuxkart
pkgincludedir = $(includedir)/tuxkart
top_builddir = ..

am__cd = CDPATH="$${ZSH_VERSION+.}$(PATH_SEPARATOR)" && cd
INSTALL = /usr/bin/install -c
install_sh_DATA = $(install_sh) -c -m 644
install_sh_PROGRAM = $(install_sh) -c
install_sh_SCRIPT = $(install_sh) -c
INSTALL_HEADER = $(INSTALL_DATA)
transform = $(program_transform_name)
NORMAL_INSTALL = :
PRE_INSTALL = :
POST_INSTALL = :
NORMAL_UNINSTALL = :
PRE_UNINSTALL = :
POST_UNINSTALL = :
ACLOCAL = aclocal-1.7
AMDEP_FALSE = #
AMDEP_TRUE = 
AMTAR = tar
AUTOCONF = autoconf
AUTOHEADER = autoheader
AUTOMAKE = automake-1.7
AWK = gawk
CC = gcc
CCDEPMODE = depmode=gcc3
CFLAGS = -g -O2 -O6 -Wall
CPP = gcc -E
CPPFLAGS = 
CXX = g++
CXXCPP = g++ -E
CXXDEPMODE = depmode=gcc3
CXXFLAGS = -g -O2 -O6 -Wall
CYGPATH_W = echo
DEFS = -DPACKAGE_NAME=\"\" -DPACKAGE_TARNAME=\"\" -DPACKAGE_VERSION=\"\" -DPACKAGE_STRING=\"\" -DPACKAGE_BUGREPORT=\"\" -DPACKAGE=\"tuxkart\" -DVERSION=\"0.4.0\" -DSTDC_HEADERS=1 -DHAVE_SYS_TYPES_H=1 -DHAVE_SYS_STAT_H=1 -DHAVE_STDLIB_H=1 -DHAVE_STRING_H=1 -DHAVE_MEMORY_H=1 -DHAVE_STRINGS_H=1 -DHAVE_INTTYPES_H=1 -DHAVE_STDINT_H=1 -DHAVE_UNISTD_H=1 -DHAVE_LIBGL=1 -DSTDC_HEADERS=1 -DHAVE_GL_GL_H=1 -DLINUX_JOYSTICK_IS_PRESENT=1 -DTUXKART_DATADIR=\"/usr/local/share/games/tuxkart\" 
DEPDIR = .deps
ECHO_C = 
ECHO_N = -n
ECHO_T = 
EGREP = grep -E
ENABLE_AUDIO_FALSE = #
ENABLE_AUDIO_TRUE = 
ENABLE_IRIX_AUDIO_FALSE = 
ENABLE_IRIX_AUDIO_TRUE = #
ENABLE_WIN32_AUDIO_FALSE = 
ENABLE_WIN32_AUDIO_TRUE = #
EXEEXT = 
INSTALL_DATA = ${INSTALL} -m 644
INSTALL_PROGRAM = ${INSTALL}
INSTALL_SCRIPT = ${INSTALL}
INSTALL_STRIP_PROGRAM = ${SHELL} $(install_sh) -c -s
LDFLAGS = 
LIBOBJS = 
LIBS = -lplibjs -lplibsl -lplibssg -lplibpu -lplibfnt -lplibsg -lplibpw -lplibul -lGL    -lSM -lICE -lpthread -lX11 -lXi -lXext -lXmu  -lm
LTLIBOBJS = 
MAKEINFO = makeinfo
OBJEXT = o
PACKAGE = tuxkart
PACKAGE_BUGREPORT = 
PACKAGE_NAME = 
PACKAGE_STRING = 
PACKAGE_TARNAME = 
PACKAGE_VERSION = 
PATH_SEPARATOR = :
RANLIB = ranlib
SET_MAKE = 
SHELL = /bin/sh
STRIP = 
VERSION = 0.4.0
X_CFLAGS = 
X_EXTRA_LIBS = 
X_LIBS = 
X_PRE_LIBS =  -lSM -lICE
ac_ct_CC = gcc
ac_ct_CXX = g++
ac_ct_RANLIB = ranlib
ac_ct_STRIP = 
am__fastdepCC_FALSE = #
am__fastdepCC_TRUE = 
am__fastdepCXX_FALSE = #
am__fastdepCXX_TRUE = 
am__include = include
am__leading_dot = .
am__quote = 

bindir = $(prefix)/games
build_alias = 
datadir = ${prefix}/share
exec_prefix = ${prefix}
host_alias = 
includedir = ${prefix}/include
infodir = ${prefix}/info
install_sh = /home/coz/Proyectos/trunk/install-sh
libdir = ${exec_prefix}/lib
libexecdir = ${exec_prefix}/libexec
localstatedir = ${prefix}/var
mandir = ${prefix}/man
oldincludedir = /usr/include
prefix = /usr/local
program_transform_name = s,x,x,
sbindir = ${exec_prefix}/sbin
sharedstatedir = ${prefix}/com
sysconfdir = ${prefix}/etc
target_alias = 

bin_PROGRAMS = tuxkart

tuxkart_SOURCES = \
	start_tuxkart.cxx	 start_tuxkart.h        \
	Material.cxx		 Material.h             \
	MaterialManager.cxx	 MaterialManager.h      \
	Attachment.cxx		 Attachment.h	        \
	Collectable.cxx		 Collectable.h	        \
	CollectableManager.cxx	 CollectableManager.h   \
	sound.cxx		 sound.h                \
	utils.cxx		 utils.h                \
	isect.cxx		 isect.h                \
	guNet.cxx		 guNet.h                \
	Track.cxx		 Track.h                \
	Herring.cxx 		 Herring.h              \
	HerringManager.cxx	 HerringManager.h       \
	Explosion.cxx		 Explosion.h            \
	Config.cxx 		 Config.h               \
	CupData.cxx   		 CupData.h              \
	KartManager.cxx		 KartManager.h          \
	ProjectileManager.cxx	 ProjectileManager.h    \
	KartProperties.cxx	 KartProperties.h       \
	Loader.cxx          	 Loader.h               \
	RaceManager.cxx		 RaceManager.h          \
	StringUtils.cxx		 StringUtils.h          \
	TrackManager.cxx	 TrackManager.h         \
	World.cxx		 World.h                \
	preprocessor.cxx	 preprocessor.h	        \
	HookManager.cxx		 HookManager.h	        \
	SkidMark.cxx		 SkidMark.h	        \
	Shadow.cxx		 Shadow.h	        \
	StartScreen.cxx		 StartScreen.h	        \
	WorldScreen.cxx		 WorldScreen.h	        \
	ParticleSystem.cxx	 ParticleSystem.h       \
	ScreenManager.cxx	 ScreenManager.h        \
	WidgetSet.cxx		 WidgetSet.h	        \
	Camera.cxx		 Camera.h	        \
	plibdrv.cxx		 plibdrv.h	        \
	Moveable.cxx 		 Moveable.h             \
	Kart.cxx		 Kart.h		        \
	AutoKart.cxx		 AutoKart.h             \
	PlayerKart.cxx		 PlayerKart.h	        \
	Projectile.cxx 		 Projectile.h	        \
	StaticSSG.cxx 		 StatigSSG.h	        \
	History.cxx		 History.h	        \
	RaceSetup.h	   	 NoCopy.h	        \
	KartControl.h		 constants.h            \
	Traffic.cxx 				        \
	lisp/Lisp.cxx		 lisp/Lisp.h            \
	lisp/Lexer.cxx		 lisp/Lexer.h           \
	lisp/Parser.cxx		 lisp/Parser.h          \
	lisp/Writer.cxx		 lisp/Writer.h	        \
	gui/BaseGUI.cxx		 gui/BaseGUI.h	        \
	gui/RaceGUI.cxx		 gui/RaceGUI.h	        \
	gui/NumLaps.cxx		 gui/NumLaps.h	        \
	gui/RaceMenu.cxx	 gui/RaceMenu.h	        \
	gui/NumPlayers.cxx	 gui/NumPlayers.h       \
	gui/TrackSel.cxx	 gui/TrackSel.h	        \
	gui/PlayerControls.cxx	 gui/PlayerControls.h   \
	gui/ConfigDisplay.cxx	 gui/ConfigDisplay.h    \
	gui/ConfigControls.cxx	 gui/ConfigControls.h   \
	gui/Options.cxx		 gui/Options	        \
	gui/GameMode.cxx	 gui/GameMode.h	        \
	gui/Difficulty.cxx	 gui/Difficulty.h       \
	gui/CharSel.cxx		 gui/CharSel.h	        \
	gui/MainMenu.cxx	 gui/MainMenu.h         \
	gui/SingleWindowMenu.cxx gui/SingleWindowMenu.h

subdir = src
ACLOCAL_M4 = $(top_srcdir)/aclocal.m4
mkinstalldirs = $(SHELL) $(top_srcdir)/mkinstalldirs
CONFIG_CLEAN_FILES =
bin_PROGRAMS = tuxkart$(EXEEXT)
PROGRAMS = $(bin_PROGRAMS)

am_tuxkart_OBJECTS = start_tuxkart.$(OBJEXT) Material.$(OBJEXT) \
	MaterialManager.$(OBJEXT) Attachment.$(OBJEXT) \
	Collectable.$(OBJEXT) CollectableManager.$(OBJEXT) \
	sound.$(OBJEXT) utils.$(OBJEXT) isect.$(OBJEXT) guNet.$(OBJEXT) \
	Track.$(OBJEXT) Herring.$(OBJEXT) HerringManager.$(OBJEXT) \
	Explosion.$(OBJEXT) Config.$(OBJEXT) CupData.$(OBJEXT) \
	KartManager.$(OBJEXT) ProjectileManager.$(OBJEXT) \
	KartProperties.$(OBJEXT) Loader.$(OBJEXT) RaceManager.$(OBJEXT) \
	StringUtils.$(OBJEXT) TrackManager.$(OBJEXT) World.$(OBJEXT) \
	preprocessor.$(OBJEXT) HookManager.$(OBJEXT) SkidMark.$(OBJEXT) \
	Shadow.$(OBJEXT) StartScreen.$(OBJEXT) WorldScreen.$(OBJEXT) \
	ParticleSystem.$(OBJEXT) ScreenManager.$(OBJEXT) \
	WidgetSet.$(OBJEXT) Camera.$(OBJEXT) plibdrv.$(OBJEXT) \
	Moveable.$(OBJEXT) Kart.$(OBJEXT) AutoKart.$(OBJEXT) \
	PlayerKart.$(OBJEXT) Projectile.$(OBJEXT) StaticSSG.$(OBJEXT) \
	History.$(OBJEXT) Traffic.$(OBJEXT) Lisp.$(OBJEXT) \
	Lexer.$(OBJEXT) Parser.$(OBJEXT) Writer.$(OBJEXT) \
	BaseGUI.$(OBJEXT) RaceGUI.$(OBJEXT) NumLaps.$(OBJEXT) \
	RaceMenu.$(OBJEXT) NumPlayers.$(OBJEXT) TrackSel.$(OBJEXT) \
	PlayerControls.$(OBJEXT) ConfigDisplay.$(OBJEXT) \
	ConfigControls.$(OBJEXT) Options.$(OBJEXT) GameMode.$(OBJEXT) \
	Difficulty.$(OBJEXT) CharSel.$(OBJEXT) MainMenu.$(OBJEXT) \
	SingleWindowMenu.$(OBJEXT)
tuxkart_OBJECTS = $(am_tuxkart_OBJECTS)
tuxkart_LDADD = $(LDADD)
tuxkart_DEPENDENCIES =
tuxkart_LDFLAGS =

DEFAULT_INCLUDES =  -I. -I$(srcdir)
depcomp = $(SHELL) $(top_srcdir)/depcomp
am__depfiles_maybe = depfiles
DEP_FILES = ./$(DEPDIR)/Attachment.Po \
	./$(DEPDIR)/AutoKart.Po ./$(DEPDIR)/BaseGUI.Po \
	./$(DEPDIR)/Camera.Po ./$(DEPDIR)/CharSel.Po \
	./$(DEPDIR)/Collectable.Po \
	./$(DEPDIR)/CollectableManager.Po \
	./$(DEPDIR)/Config.Po ./$(DEPDIR)/ConfigControls.Po \
	./$(DEPDIR)/ConfigDisplay.Po ./$(DEPDIR)/CupData.Po \
	./$(DEPDIR)/Difficulty.Po ./$(DEPDIR)/Explosion.Po \
	./$(DEPDIR)/GameMode.Po ./$(DEPDIR)/Herring.Po \
	./$(DEPDIR)/HerringManager.Po \
	./$(DEPDIR)/History.Po ./$(DEPDIR)/HookManager.Po \
	./$(DEPDIR)/Kart.Po ./$(DEPDIR)/KartManager.Po \
	./$(DEPDIR)/KartProperties.Po ./$(DEPDIR)/Lexer.Po \
	./$(DEPDIR)/Lisp.Po ./$(DEPDIR)/Loader.Po \
	./$(DEPDIR)/MainMenu.Po ./$(DEPDIR)/Material.Po \
	./$(DEPDIR)/MaterialManager.Po \
	./$(DEPDIR)/Moveable.Po ./$(DEPDIR)/NumLaps.Po \
	./$(DEPDIR)/NumPlayers.Po ./$(DEPDIR)/Options.Po \
	./$(DEPDIR)/Parser.Po ./$(DEPDIR)/ParticleSystem.Po \
	./$(DEPDIR)/PlayerControls.Po \
	./$(DEPDIR)/PlayerKart.Po ./$(DEPDIR)/Projectile.Po \
	./$(DEPDIR)/ProjectileManager.Po \
	./$(DEPDIR)/RaceGUI.Po ./$(DEPDIR)/RaceManager.Po \
	./$(DEPDIR)/RaceMenu.Po \
	./$(DEPDIR)/ScreenManager.Po ./$(DEPDIR)/Shadow.Po \
	./$(DEPDIR)/SingleWindowMenu.Po \
	./$(DEPDIR)/SkidMark.Po ./$(DEPDIR)/StartScreen.Po \
	./$(DEPDIR)/StaticSSG.Po ./$(DEPDIR)/StringUtils.Po \
	./$(DEPDIR)/Track.Po ./$(DEPDIR)/TrackManager.Po \
	./$(DEPDIR)/TrackSel.Po ./$(DEPDIR)/Traffic.Po \
	./$(DEPDIR)/WidgetSet.Po ./$(DEPDIR)/World.Po \
	./$(DEPDIR)/WorldScreen.Po ./$(DEPDIR)/Writer.Po \
	./$(DEPDIR)/guNet.Po ./$(DEPDIR)/isect.Po \
	./$(DEPDIR)/plibdrv.Po ./$(DEPDIR)/preprocessor.Po \
	./$(DEPDIR)/sound.Po ./$(DEPDIR)/start_tuxkart.Po \
	./$(DEPDIR)/utils.Po
CXXCOMPILE = $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) \
	$(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS)
CXXLD = $(CXX)
CXXLINK = $(CXXLD) $(AM_CXXFLAGS) $(CXXFLAGS) $(AM_LDFLAGS) $(LDFLAGS) \
	-o $@
COMPILE = $(CC) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) \
	$(CPPFLAGS) $(AM_CFLAGS) $(CFLAGS)
CCLD = $(CC)
LINK = $(CCLD) $(AM_CFLAGS) $(CFLAGS) $(AM_LDFLAGS) $(LDFLAGS) -o $@
DIST_SOURCES = $(tuxkart_SOURCES)
DIST_COMMON = $(srcdir)/Makefile.in Makefile.am
SOURCES = $(tuxkart_SOURCES)

all: all-am

.SUFFIXES:
.SUFFIXES: .cxx .o .obj
$(srcdir)/Makefile.in:  Makefile.am  $(top_srcdir)/configure.in $(ACLOCAL_M4)
	cd $(top_srcdir) && \
	  $(AUTOMAKE) --gnu  src/Makefile
Makefile:  $(srcdir)/Makefile.in  $(top_builddir)/config.status
	cd $(top_builddir) && $(SHELL) ./config.status $(subdir)/$@ $(am__depfiles_maybe)
binPROGRAMS_INSTALL = $(INSTALL_PROGRAM)
install-binPROGRAMS: $(bin_PROGRAMS)
	@$(NORMAL_INSTALL)
	$(mkinstalldirs) $(DESTDIR)$(bindir)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  p1=`echo $$p|sed 's/$(EXEEXT)$$//'`; \
	  if test -f $$p \
	  ; then \
	    f=`echo "$$p1" | sed 's,^.*/,,;$(transform);s/$$/$(EXEEXT)/'`; \
	   echo " $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f"; \
	   $(INSTALL_PROGRAM_ENV) $(binPROGRAMS_INSTALL) $$p $(DESTDIR)$(bindir)/$$f || exit 1; \
	  else :; fi; \
	done

uninstall-binPROGRAMS:
	@$(NORMAL_UNINSTALL)
	@list='$(bin_PROGRAMS)'; for p in $$list; do \
	  f=`echo "$$p" | sed 's,^.*/,,;s/$(EXEEXT)$$//;$(transform);s/$$/$(EXEEXT)/'`; \
	  echo " rm -f $(DESTDIR)$(bindir)/$$f"; \
	  rm -f $(DESTDIR)$(bindir)/$$f; \
	done

clean-binPROGRAMS:
	-test -z "$(bin_PROGRAMS)" || rm -f $(bin_PROGRAMS)
tuxkart$(EXEEXT): $(tuxkart_OBJECTS) $(tuxkart_DEPENDENCIES) 
	@rm -f tuxkart$(EXEEXT)
	$(CXXLINK) $(tuxkart_LDFLAGS) $(tuxkart_OBJECTS) $(tuxkart_LDADD) $(LIBS)

mostlyclean-compile:
	-rm -f *.$(OBJEXT) core *.core

distclean-compile:
	-rm -f *.tab.c

include ./$(DEPDIR)/Attachment.Po
include ./$(DEPDIR)/AutoKart.Po
include ./$(DEPDIR)/BaseGUI.Po
include ./$(DEPDIR)/Camera.Po
include ./$(DEPDIR)/CharSel.Po
include ./$(DEPDIR)/Collectable.Po
include ./$(DEPDIR)/CollectableManager.Po
include ./$(DEPDIR)/Config.Po
include ./$(DEPDIR)/ConfigControls.Po
include ./$(DEPDIR)/ConfigDisplay.Po
include ./$(DEPDIR)/CupData.Po
include ./$(DEPDIR)/Difficulty.Po
include ./$(DEPDIR)/Explosion.Po
include ./$(DEPDIR)/GameMode.Po
include ./$(DEPDIR)/Herring.Po
include ./$(DEPDIR)/HerringManager.Po
include ./$(DEPDIR)/History.Po
include ./$(DEPDIR)/HookManager.Po
include ./$(DEPDIR)/Kart.Po
include ./$(DEPDIR)/KartManager.Po
include ./$(DEPDIR)/KartProperties.Po
include ./$(DEPDIR)/Lexer.Po
include ./$(DEPDIR)/Lisp.Po
include ./$(DEPDIR)/Loader.Po
include ./$(DEPDIR)/MainMenu.Po
include ./$(DEPDIR)/Material.Po
include ./$(DEPDIR)/MaterialManager.Po
include ./$(DEPDIR)/Moveable.Po
include ./$(DEPDIR)/NumLaps.Po
include ./$(DEPDIR)/NumPlayers.Po
include ./$(DEPDIR)/Options.Po
include ./$(DEPDIR)/Parser.Po
include ./$(DEPDIR)/ParticleSystem.Po
include ./$(DEPDIR)/PlayerControls.Po
include ./$(DEPDIR)/PlayerKart.Po
include ./$(DEPDIR)/Projectile.Po
include ./$(DEPDIR)/ProjectileManager.Po
include ./$(DEPDIR)/RaceGUI.Po
include ./$(DEPDIR)/RaceManager.Po
include ./$(DEPDIR)/RaceMenu.Po
include ./$(DEPDIR)/ScreenManager.Po
include ./$(DEPDIR)/Shadow.Po
include ./$(DEPDIR)/SingleWindowMenu.Po
include ./$(DEPDIR)/SkidMark.Po
include ./$(DEPDIR)/StartScreen.Po
include ./$(DEPDIR)/StaticSSG.Po
include ./$(DEPDIR)/StringUtils.Po
include ./$(DEPDIR)/Track.Po
include ./$(DEPDIR)/TrackManager.Po
include ./$(DEPDIR)/TrackSel.Po
include ./$(DEPDIR)/Traffic.Po
include ./$(DEPDIR)/WidgetSet.Po
include ./$(DEPDIR)/World.Po
include ./$(DEPDIR)/WorldScreen.Po
include ./$(DEPDIR)/Writer.Po
include ./$(DEPDIR)/guNet.Po
include ./$(DEPDIR)/isect.Po
include ./$(DEPDIR)/plibdrv.Po
include ./$(DEPDIR)/preprocessor.Po
include ./$(DEPDIR)/sound.Po
include ./$(DEPDIR)/start_tuxkart.Po
include ./$(DEPDIR)/utils.Po

.cxx.o:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `test -f '$<' || echo '$(srcdir)/'`$<

.cxx.obj:
	if $(CXXCOMPILE) -MT $@ -MD -MP -MF "$(DEPDIR)/$*.Tpo" \
	  -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`; \
	then mv -f "$(DEPDIR)/$*.Tpo" "$(DEPDIR)/$*.Po"; \
	else rm -f "$(DEPDIR)/$*.Tpo"; exit 1; \
	fi
#	source='$<' object='$@' libtool=no \
#	depfile='$(DEPDIR)/$*.Po' tmpdepfile='$(DEPDIR)/$*.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXXCOMPILE) -c -o $@ `if test -f '$<'; then $(CYGPATH_W) '$<'; else $(CYGPATH_W) '$(srcdir)/$<'; fi`

Lisp.o: lisp/Lisp.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Lisp.o -MD -MP -MF "$(DEPDIR)/Lisp.Tpo" \
	  -c -o Lisp.o `test -f 'lisp/Lisp.cxx' || echo '$(srcdir)/'`lisp/Lisp.cxx; \
	then mv -f "$(DEPDIR)/Lisp.Tpo" "$(DEPDIR)/Lisp.Po"; \
	else rm -f "$(DEPDIR)/Lisp.Tpo"; exit 1; \
	fi
#	source='lisp/Lisp.cxx' object='Lisp.o' libtool=no \
#	depfile='$(DEPDIR)/Lisp.Po' tmpdepfile='$(DEPDIR)/Lisp.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Lisp.o `test -f 'lisp/Lisp.cxx' || echo '$(srcdir)/'`lisp/Lisp.cxx

Lisp.obj: lisp/Lisp.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Lisp.obj -MD -MP -MF "$(DEPDIR)/Lisp.Tpo" \
	  -c -o Lisp.obj `if test -f 'lisp/Lisp.cxx'; then $(CYGPATH_W) 'lisp/Lisp.cxx'; else $(CYGPATH_W) '$(srcdir)/lisp/Lisp.cxx'; fi`; \
	then mv -f "$(DEPDIR)/Lisp.Tpo" "$(DEPDIR)/Lisp.Po"; \
	else rm -f "$(DEPDIR)/Lisp.Tpo"; exit 1; \
	fi
#	source='lisp/Lisp.cxx' object='Lisp.obj' libtool=no \
#	depfile='$(DEPDIR)/Lisp.Po' tmpdepfile='$(DEPDIR)/Lisp.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Lisp.obj `if test -f 'lisp/Lisp.cxx'; then $(CYGPATH_W) 'lisp/Lisp.cxx'; else $(CYGPATH_W) '$(srcdir)/lisp/Lisp.cxx'; fi`

Lexer.o: lisp/Lexer.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Lexer.o -MD -MP -MF "$(DEPDIR)/Lexer.Tpo" \
	  -c -o Lexer.o `test -f 'lisp/Lexer.cxx' || echo '$(srcdir)/'`lisp/Lexer.cxx; \
	then mv -f "$(DEPDIR)/Lexer.Tpo" "$(DEPDIR)/Lexer.Po"; \
	else rm -f "$(DEPDIR)/Lexer.Tpo"; exit 1; \
	fi
#	source='lisp/Lexer.cxx' object='Lexer.o' libtool=no \
#	depfile='$(DEPDIR)/Lexer.Po' tmpdepfile='$(DEPDIR)/Lexer.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Lexer.o `test -f 'lisp/Lexer.cxx' || echo '$(srcdir)/'`lisp/Lexer.cxx

Lexer.obj: lisp/Lexer.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Lexer.obj -MD -MP -MF "$(DEPDIR)/Lexer.Tpo" \
	  -c -o Lexer.obj `if test -f 'lisp/Lexer.cxx'; then $(CYGPATH_W) 'lisp/Lexer.cxx'; else $(CYGPATH_W) '$(srcdir)/lisp/Lexer.cxx'; fi`; \
	then mv -f "$(DEPDIR)/Lexer.Tpo" "$(DEPDIR)/Lexer.Po"; \
	else rm -f "$(DEPDIR)/Lexer.Tpo"; exit 1; \
	fi
#	source='lisp/Lexer.cxx' object='Lexer.obj' libtool=no \
#	depfile='$(DEPDIR)/Lexer.Po' tmpdepfile='$(DEPDIR)/Lexer.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Lexer.obj `if test -f 'lisp/Lexer.cxx'; then $(CYGPATH_W) 'lisp/Lexer.cxx'; else $(CYGPATH_W) '$(srcdir)/lisp/Lexer.cxx'; fi`

Parser.o: lisp/Parser.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Parser.o -MD -MP -MF "$(DEPDIR)/Parser.Tpo" \
	  -c -o Parser.o `test -f 'lisp/Parser.cxx' || echo '$(srcdir)/'`lisp/Parser.cxx; \
	then mv -f "$(DEPDIR)/Parser.Tpo" "$(DEPDIR)/Parser.Po"; \
	else rm -f "$(DEPDIR)/Parser.Tpo"; exit 1; \
	fi
#	source='lisp/Parser.cxx' object='Parser.o' libtool=no \
#	depfile='$(DEPDIR)/Parser.Po' tmpdepfile='$(DEPDIR)/Parser.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Parser.o `test -f 'lisp/Parser.cxx' || echo '$(srcdir)/'`lisp/Parser.cxx

Parser.obj: lisp/Parser.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Parser.obj -MD -MP -MF "$(DEPDIR)/Parser.Tpo" \
	  -c -o Parser.obj `if test -f 'lisp/Parser.cxx'; then $(CYGPATH_W) 'lisp/Parser.cxx'; else $(CYGPATH_W) '$(srcdir)/lisp/Parser.cxx'; fi`; \
	then mv -f "$(DEPDIR)/Parser.Tpo" "$(DEPDIR)/Parser.Po"; \
	else rm -f "$(DEPDIR)/Parser.Tpo"; exit 1; \
	fi
#	source='lisp/Parser.cxx' object='Parser.obj' libtool=no \
#	depfile='$(DEPDIR)/Parser.Po' tmpdepfile='$(DEPDIR)/Parser.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Parser.obj `if test -f 'lisp/Parser.cxx'; then $(CYGPATH_W) 'lisp/Parser.cxx'; else $(CYGPATH_W) '$(srcdir)/lisp/Parser.cxx'; fi`

Writer.o: lisp/Writer.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Writer.o -MD -MP -MF "$(DEPDIR)/Writer.Tpo" \
	  -c -o Writer.o `test -f 'lisp/Writer.cxx' || echo '$(srcdir)/'`lisp/Writer.cxx; \
	then mv -f "$(DEPDIR)/Writer.Tpo" "$(DEPDIR)/Writer.Po"; \
	else rm -f "$(DEPDIR)/Writer.Tpo"; exit 1; \
	fi
#	source='lisp/Writer.cxx' object='Writer.o' libtool=no \
#	depfile='$(DEPDIR)/Writer.Po' tmpdepfile='$(DEPDIR)/Writer.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Writer.o `test -f 'lisp/Writer.cxx' || echo '$(srcdir)/'`lisp/Writer.cxx

Writer.obj: lisp/Writer.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Writer.obj -MD -MP -MF "$(DEPDIR)/Writer.Tpo" \
	  -c -o Writer.obj `if test -f 'lisp/Writer.cxx'; then $(CYGPATH_W) 'lisp/Writer.cxx'; else $(CYGPATH_W) '$(srcdir)/lisp/Writer.cxx'; fi`; \
	then mv -f "$(DEPDIR)/Writer.Tpo" "$(DEPDIR)/Writer.Po"; \
	else rm -f "$(DEPDIR)/Writer.Tpo"; exit 1; \
	fi
#	source='lisp/Writer.cxx' object='Writer.obj' libtool=no \
#	depfile='$(DEPDIR)/Writer.Po' tmpdepfile='$(DEPDIR)/Writer.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Writer.obj `if test -f 'lisp/Writer.cxx'; then $(CYGPATH_W) 'lisp/Writer.cxx'; else $(CYGPATH_W) '$(srcdir)/lisp/Writer.cxx'; fi`

BaseGUI.o: gui/BaseGUI.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BaseGUI.o -MD -MP -MF "$(DEPDIR)/BaseGUI.Tpo" \
	  -c -o BaseGUI.o `test -f 'gui/BaseGUI.cxx' || echo '$(srcdir)/'`gui/BaseGUI.cxx; \
	then mv -f "$(DEPDIR)/BaseGUI.Tpo" "$(DEPDIR)/BaseGUI.Po"; \
	else rm -f "$(DEPDIR)/BaseGUI.Tpo"; exit 1; \
	fi
#	source='gui/BaseGUI.cxx' object='BaseGUI.o' libtool=no \
#	depfile='$(DEPDIR)/BaseGUI.Po' tmpdepfile='$(DEPDIR)/BaseGUI.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BaseGUI.o `test -f 'gui/BaseGUI.cxx' || echo '$(srcdir)/'`gui/BaseGUI.cxx

BaseGUI.obj: gui/BaseGUI.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT BaseGUI.obj -MD -MP -MF "$(DEPDIR)/BaseGUI.Tpo" \
	  -c -o BaseGUI.obj `if test -f 'gui/BaseGUI.cxx'; then $(CYGPATH_W) 'gui/BaseGUI.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/BaseGUI.cxx'; fi`; \
	then mv -f "$(DEPDIR)/BaseGUI.Tpo" "$(DEPDIR)/BaseGUI.Po"; \
	else rm -f "$(DEPDIR)/BaseGUI.Tpo"; exit 1; \
	fi
#	source='gui/BaseGUI.cxx' object='BaseGUI.obj' libtool=no \
#	depfile='$(DEPDIR)/BaseGUI.Po' tmpdepfile='$(DEPDIR)/BaseGUI.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o BaseGUI.obj `if test -f 'gui/BaseGUI.cxx'; then $(CYGPATH_W) 'gui/BaseGUI.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/BaseGUI.cxx'; fi`

RaceGUI.o: gui/RaceGUI.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RaceGUI.o -MD -MP -MF "$(DEPDIR)/RaceGUI.Tpo" \
	  -c -o RaceGUI.o `test -f 'gui/RaceGUI.cxx' || echo '$(srcdir)/'`gui/RaceGUI.cxx; \
	then mv -f "$(DEPDIR)/RaceGUI.Tpo" "$(DEPDIR)/RaceGUI.Po"; \
	else rm -f "$(DEPDIR)/RaceGUI.Tpo"; exit 1; \
	fi
#	source='gui/RaceGUI.cxx' object='RaceGUI.o' libtool=no \
#	depfile='$(DEPDIR)/RaceGUI.Po' tmpdepfile='$(DEPDIR)/RaceGUI.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RaceGUI.o `test -f 'gui/RaceGUI.cxx' || echo '$(srcdir)/'`gui/RaceGUI.cxx

RaceGUI.obj: gui/RaceGUI.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RaceGUI.obj -MD -MP -MF "$(DEPDIR)/RaceGUI.Tpo" \
	  -c -o RaceGUI.obj `if test -f 'gui/RaceGUI.cxx'; then $(CYGPATH_W) 'gui/RaceGUI.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/RaceGUI.cxx'; fi`; \
	then mv -f "$(DEPDIR)/RaceGUI.Tpo" "$(DEPDIR)/RaceGUI.Po"; \
	else rm -f "$(DEPDIR)/RaceGUI.Tpo"; exit 1; \
	fi
#	source='gui/RaceGUI.cxx' object='RaceGUI.obj' libtool=no \
#	depfile='$(DEPDIR)/RaceGUI.Po' tmpdepfile='$(DEPDIR)/RaceGUI.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RaceGUI.obj `if test -f 'gui/RaceGUI.cxx'; then $(CYGPATH_W) 'gui/RaceGUI.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/RaceGUI.cxx'; fi`

NumLaps.o: gui/NumLaps.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NumLaps.o -MD -MP -MF "$(DEPDIR)/NumLaps.Tpo" \
	  -c -o NumLaps.o `test -f 'gui/NumLaps.cxx' || echo '$(srcdir)/'`gui/NumLaps.cxx; \
	then mv -f "$(DEPDIR)/NumLaps.Tpo" "$(DEPDIR)/NumLaps.Po"; \
	else rm -f "$(DEPDIR)/NumLaps.Tpo"; exit 1; \
	fi
#	source='gui/NumLaps.cxx' object='NumLaps.o' libtool=no \
#	depfile='$(DEPDIR)/NumLaps.Po' tmpdepfile='$(DEPDIR)/NumLaps.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NumLaps.o `test -f 'gui/NumLaps.cxx' || echo '$(srcdir)/'`gui/NumLaps.cxx

NumLaps.obj: gui/NumLaps.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NumLaps.obj -MD -MP -MF "$(DEPDIR)/NumLaps.Tpo" \
	  -c -o NumLaps.obj `if test -f 'gui/NumLaps.cxx'; then $(CYGPATH_W) 'gui/NumLaps.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/NumLaps.cxx'; fi`; \
	then mv -f "$(DEPDIR)/NumLaps.Tpo" "$(DEPDIR)/NumLaps.Po"; \
	else rm -f "$(DEPDIR)/NumLaps.Tpo"; exit 1; \
	fi
#	source='gui/NumLaps.cxx' object='NumLaps.obj' libtool=no \
#	depfile='$(DEPDIR)/NumLaps.Po' tmpdepfile='$(DEPDIR)/NumLaps.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NumLaps.obj `if test -f 'gui/NumLaps.cxx'; then $(CYGPATH_W) 'gui/NumLaps.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/NumLaps.cxx'; fi`

RaceMenu.o: gui/RaceMenu.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RaceMenu.o -MD -MP -MF "$(DEPDIR)/RaceMenu.Tpo" \
	  -c -o RaceMenu.o `test -f 'gui/RaceMenu.cxx' || echo '$(srcdir)/'`gui/RaceMenu.cxx; \
	then mv -f "$(DEPDIR)/RaceMenu.Tpo" "$(DEPDIR)/RaceMenu.Po"; \
	else rm -f "$(DEPDIR)/RaceMenu.Tpo"; exit 1; \
	fi
#	source='gui/RaceMenu.cxx' object='RaceMenu.o' libtool=no \
#	depfile='$(DEPDIR)/RaceMenu.Po' tmpdepfile='$(DEPDIR)/RaceMenu.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RaceMenu.o `test -f 'gui/RaceMenu.cxx' || echo '$(srcdir)/'`gui/RaceMenu.cxx

RaceMenu.obj: gui/RaceMenu.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT RaceMenu.obj -MD -MP -MF "$(DEPDIR)/RaceMenu.Tpo" \
	  -c -o RaceMenu.obj `if test -f 'gui/RaceMenu.cxx'; then $(CYGPATH_W) 'gui/RaceMenu.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/RaceMenu.cxx'; fi`; \
	then mv -f "$(DEPDIR)/RaceMenu.Tpo" "$(DEPDIR)/RaceMenu.Po"; \
	else rm -f "$(DEPDIR)/RaceMenu.Tpo"; exit 1; \
	fi
#	source='gui/RaceMenu.cxx' object='RaceMenu.obj' libtool=no \
#	depfile='$(DEPDIR)/RaceMenu.Po' tmpdepfile='$(DEPDIR)/RaceMenu.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o RaceMenu.obj `if test -f 'gui/RaceMenu.cxx'; then $(CYGPATH_W) 'gui/RaceMenu.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/RaceMenu.cxx'; fi`

NumPlayers.o: gui/NumPlayers.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NumPlayers.o -MD -MP -MF "$(DEPDIR)/NumPlayers.Tpo" \
	  -c -o NumPlayers.o `test -f 'gui/NumPlayers.cxx' || echo '$(srcdir)/'`gui/NumPlayers.cxx; \
	then mv -f "$(DEPDIR)/NumPlayers.Tpo" "$(DEPDIR)/NumPlayers.Po"; \
	else rm -f "$(DEPDIR)/NumPlayers.Tpo"; exit 1; \
	fi
#	source='gui/NumPlayers.cxx' object='NumPlayers.o' libtool=no \
#	depfile='$(DEPDIR)/NumPlayers.Po' tmpdepfile='$(DEPDIR)/NumPlayers.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NumPlayers.o `test -f 'gui/NumPlayers.cxx' || echo '$(srcdir)/'`gui/NumPlayers.cxx

NumPlayers.obj: gui/NumPlayers.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT NumPlayers.obj -MD -MP -MF "$(DEPDIR)/NumPlayers.Tpo" \
	  -c -o NumPlayers.obj `if test -f 'gui/NumPlayers.cxx'; then $(CYGPATH_W) 'gui/NumPlayers.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/NumPlayers.cxx'; fi`; \
	then mv -f "$(DEPDIR)/NumPlayers.Tpo" "$(DEPDIR)/NumPlayers.Po"; \
	else rm -f "$(DEPDIR)/NumPlayers.Tpo"; exit 1; \
	fi
#	source='gui/NumPlayers.cxx' object='NumPlayers.obj' libtool=no \
#	depfile='$(DEPDIR)/NumPlayers.Po' tmpdepfile='$(DEPDIR)/NumPlayers.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o NumPlayers.obj `if test -f 'gui/NumPlayers.cxx'; then $(CYGPATH_W) 'gui/NumPlayers.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/NumPlayers.cxx'; fi`

TrackSel.o: gui/TrackSel.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TrackSel.o -MD -MP -MF "$(DEPDIR)/TrackSel.Tpo" \
	  -c -o TrackSel.o `test -f 'gui/TrackSel.cxx' || echo '$(srcdir)/'`gui/TrackSel.cxx; \
	then mv -f "$(DEPDIR)/TrackSel.Tpo" "$(DEPDIR)/TrackSel.Po"; \
	else rm -f "$(DEPDIR)/TrackSel.Tpo"; exit 1; \
	fi
#	source='gui/TrackSel.cxx' object='TrackSel.o' libtool=no \
#	depfile='$(DEPDIR)/TrackSel.Po' tmpdepfile='$(DEPDIR)/TrackSel.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TrackSel.o `test -f 'gui/TrackSel.cxx' || echo '$(srcdir)/'`gui/TrackSel.cxx

TrackSel.obj: gui/TrackSel.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT TrackSel.obj -MD -MP -MF "$(DEPDIR)/TrackSel.Tpo" \
	  -c -o TrackSel.obj `if test -f 'gui/TrackSel.cxx'; then $(CYGPATH_W) 'gui/TrackSel.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/TrackSel.cxx'; fi`; \
	then mv -f "$(DEPDIR)/TrackSel.Tpo" "$(DEPDIR)/TrackSel.Po"; \
	else rm -f "$(DEPDIR)/TrackSel.Tpo"; exit 1; \
	fi
#	source='gui/TrackSel.cxx' object='TrackSel.obj' libtool=no \
#	depfile='$(DEPDIR)/TrackSel.Po' tmpdepfile='$(DEPDIR)/TrackSel.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o TrackSel.obj `if test -f 'gui/TrackSel.cxx'; then $(CYGPATH_W) 'gui/TrackSel.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/TrackSel.cxx'; fi`

PlayerControls.o: gui/PlayerControls.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PlayerControls.o -MD -MP -MF "$(DEPDIR)/PlayerControls.Tpo" \
	  -c -o PlayerControls.o `test -f 'gui/PlayerControls.cxx' || echo '$(srcdir)/'`gui/PlayerControls.cxx; \
	then mv -f "$(DEPDIR)/PlayerControls.Tpo" "$(DEPDIR)/PlayerControls.Po"; \
	else rm -f "$(DEPDIR)/PlayerControls.Tpo"; exit 1; \
	fi
#	source='gui/PlayerControls.cxx' object='PlayerControls.o' libtool=no \
#	depfile='$(DEPDIR)/PlayerControls.Po' tmpdepfile='$(DEPDIR)/PlayerControls.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PlayerControls.o `test -f 'gui/PlayerControls.cxx' || echo '$(srcdir)/'`gui/PlayerControls.cxx

PlayerControls.obj: gui/PlayerControls.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT PlayerControls.obj -MD -MP -MF "$(DEPDIR)/PlayerControls.Tpo" \
	  -c -o PlayerControls.obj `if test -f 'gui/PlayerControls.cxx'; then $(CYGPATH_W) 'gui/PlayerControls.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/PlayerControls.cxx'; fi`; \
	then mv -f "$(DEPDIR)/PlayerControls.Tpo" "$(DEPDIR)/PlayerControls.Po"; \
	else rm -f "$(DEPDIR)/PlayerControls.Tpo"; exit 1; \
	fi
#	source='gui/PlayerControls.cxx' object='PlayerControls.obj' libtool=no \
#	depfile='$(DEPDIR)/PlayerControls.Po' tmpdepfile='$(DEPDIR)/PlayerControls.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o PlayerControls.obj `if test -f 'gui/PlayerControls.cxx'; then $(CYGPATH_W) 'gui/PlayerControls.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/PlayerControls.cxx'; fi`

ConfigDisplay.o: gui/ConfigDisplay.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ConfigDisplay.o -MD -MP -MF "$(DEPDIR)/ConfigDisplay.Tpo" \
	  -c -o ConfigDisplay.o `test -f 'gui/ConfigDisplay.cxx' || echo '$(srcdir)/'`gui/ConfigDisplay.cxx; \
	then mv -f "$(DEPDIR)/ConfigDisplay.Tpo" "$(DEPDIR)/ConfigDisplay.Po"; \
	else rm -f "$(DEPDIR)/ConfigDisplay.Tpo"; exit 1; \
	fi
#	source='gui/ConfigDisplay.cxx' object='ConfigDisplay.o' libtool=no \
#	depfile='$(DEPDIR)/ConfigDisplay.Po' tmpdepfile='$(DEPDIR)/ConfigDisplay.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ConfigDisplay.o `test -f 'gui/ConfigDisplay.cxx' || echo '$(srcdir)/'`gui/ConfigDisplay.cxx

ConfigDisplay.obj: gui/ConfigDisplay.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ConfigDisplay.obj -MD -MP -MF "$(DEPDIR)/ConfigDisplay.Tpo" \
	  -c -o ConfigDisplay.obj `if test -f 'gui/ConfigDisplay.cxx'; then $(CYGPATH_W) 'gui/ConfigDisplay.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/ConfigDisplay.cxx'; fi`; \
	then mv -f "$(DEPDIR)/ConfigDisplay.Tpo" "$(DEPDIR)/ConfigDisplay.Po"; \
	else rm -f "$(DEPDIR)/ConfigDisplay.Tpo"; exit 1; \
	fi
#	source='gui/ConfigDisplay.cxx' object='ConfigDisplay.obj' libtool=no \
#	depfile='$(DEPDIR)/ConfigDisplay.Po' tmpdepfile='$(DEPDIR)/ConfigDisplay.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ConfigDisplay.obj `if test -f 'gui/ConfigDisplay.cxx'; then $(CYGPATH_W) 'gui/ConfigDisplay.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/ConfigDisplay.cxx'; fi`

ConfigControls.o: gui/ConfigControls.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ConfigControls.o -MD -MP -MF "$(DEPDIR)/ConfigControls.Tpo" \
	  -c -o ConfigControls.o `test -f 'gui/ConfigControls.cxx' || echo '$(srcdir)/'`gui/ConfigControls.cxx; \
	then mv -f "$(DEPDIR)/ConfigControls.Tpo" "$(DEPDIR)/ConfigControls.Po"; \
	else rm -f "$(DEPDIR)/ConfigControls.Tpo"; exit 1; \
	fi
#	source='gui/ConfigControls.cxx' object='ConfigControls.o' libtool=no \
#	depfile='$(DEPDIR)/ConfigControls.Po' tmpdepfile='$(DEPDIR)/ConfigControls.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ConfigControls.o `test -f 'gui/ConfigControls.cxx' || echo '$(srcdir)/'`gui/ConfigControls.cxx

ConfigControls.obj: gui/ConfigControls.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT ConfigControls.obj -MD -MP -MF "$(DEPDIR)/ConfigControls.Tpo" \
	  -c -o ConfigControls.obj `if test -f 'gui/ConfigControls.cxx'; then $(CYGPATH_W) 'gui/ConfigControls.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/ConfigControls.cxx'; fi`; \
	then mv -f "$(DEPDIR)/ConfigControls.Tpo" "$(DEPDIR)/ConfigControls.Po"; \
	else rm -f "$(DEPDIR)/ConfigControls.Tpo"; exit 1; \
	fi
#	source='gui/ConfigControls.cxx' object='ConfigControls.obj' libtool=no \
#	depfile='$(DEPDIR)/ConfigControls.Po' tmpdepfile='$(DEPDIR)/ConfigControls.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o ConfigControls.obj `if test -f 'gui/ConfigControls.cxx'; then $(CYGPATH_W) 'gui/ConfigControls.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/ConfigControls.cxx'; fi`

Options.o: gui/Options.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Options.o -MD -MP -MF "$(DEPDIR)/Options.Tpo" \
	  -c -o Options.o `test -f 'gui/Options.cxx' || echo '$(srcdir)/'`gui/Options.cxx; \
	then mv -f "$(DEPDIR)/Options.Tpo" "$(DEPDIR)/Options.Po"; \
	else rm -f "$(DEPDIR)/Options.Tpo"; exit 1; \
	fi
#	source='gui/Options.cxx' object='Options.o' libtool=no \
#	depfile='$(DEPDIR)/Options.Po' tmpdepfile='$(DEPDIR)/Options.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Options.o `test -f 'gui/Options.cxx' || echo '$(srcdir)/'`gui/Options.cxx

Options.obj: gui/Options.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Options.obj -MD -MP -MF "$(DEPDIR)/Options.Tpo" \
	  -c -o Options.obj `if test -f 'gui/Options.cxx'; then $(CYGPATH_W) 'gui/Options.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/Options.cxx'; fi`; \
	then mv -f "$(DEPDIR)/Options.Tpo" "$(DEPDIR)/Options.Po"; \
	else rm -f "$(DEPDIR)/Options.Tpo"; exit 1; \
	fi
#	source='gui/Options.cxx' object='Options.obj' libtool=no \
#	depfile='$(DEPDIR)/Options.Po' tmpdepfile='$(DEPDIR)/Options.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Options.obj `if test -f 'gui/Options.cxx'; then $(CYGPATH_W) 'gui/Options.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/Options.cxx'; fi`

GameMode.o: gui/GameMode.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GameMode.o -MD -MP -MF "$(DEPDIR)/GameMode.Tpo" \
	  -c -o GameMode.o `test -f 'gui/GameMode.cxx' || echo '$(srcdir)/'`gui/GameMode.cxx; \
	then mv -f "$(DEPDIR)/GameMode.Tpo" "$(DEPDIR)/GameMode.Po"; \
	else rm -f "$(DEPDIR)/GameMode.Tpo"; exit 1; \
	fi
#	source='gui/GameMode.cxx' object='GameMode.o' libtool=no \
#	depfile='$(DEPDIR)/GameMode.Po' tmpdepfile='$(DEPDIR)/GameMode.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GameMode.o `test -f 'gui/GameMode.cxx' || echo '$(srcdir)/'`gui/GameMode.cxx

GameMode.obj: gui/GameMode.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT GameMode.obj -MD -MP -MF "$(DEPDIR)/GameMode.Tpo" \
	  -c -o GameMode.obj `if test -f 'gui/GameMode.cxx'; then $(CYGPATH_W) 'gui/GameMode.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/GameMode.cxx'; fi`; \
	then mv -f "$(DEPDIR)/GameMode.Tpo" "$(DEPDIR)/GameMode.Po"; \
	else rm -f "$(DEPDIR)/GameMode.Tpo"; exit 1; \
	fi
#	source='gui/GameMode.cxx' object='GameMode.obj' libtool=no \
#	depfile='$(DEPDIR)/GameMode.Po' tmpdepfile='$(DEPDIR)/GameMode.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o GameMode.obj `if test -f 'gui/GameMode.cxx'; then $(CYGPATH_W) 'gui/GameMode.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/GameMode.cxx'; fi`

Difficulty.o: gui/Difficulty.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Difficulty.o -MD -MP -MF "$(DEPDIR)/Difficulty.Tpo" \
	  -c -o Difficulty.o `test -f 'gui/Difficulty.cxx' || echo '$(srcdir)/'`gui/Difficulty.cxx; \
	then mv -f "$(DEPDIR)/Difficulty.Tpo" "$(DEPDIR)/Difficulty.Po"; \
	else rm -f "$(DEPDIR)/Difficulty.Tpo"; exit 1; \
	fi
#	source='gui/Difficulty.cxx' object='Difficulty.o' libtool=no \
#	depfile='$(DEPDIR)/Difficulty.Po' tmpdepfile='$(DEPDIR)/Difficulty.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Difficulty.o `test -f 'gui/Difficulty.cxx' || echo '$(srcdir)/'`gui/Difficulty.cxx

Difficulty.obj: gui/Difficulty.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT Difficulty.obj -MD -MP -MF "$(DEPDIR)/Difficulty.Tpo" \
	  -c -o Difficulty.obj `if test -f 'gui/Difficulty.cxx'; then $(CYGPATH_W) 'gui/Difficulty.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/Difficulty.cxx'; fi`; \
	then mv -f "$(DEPDIR)/Difficulty.Tpo" "$(DEPDIR)/Difficulty.Po"; \
	else rm -f "$(DEPDIR)/Difficulty.Tpo"; exit 1; \
	fi
#	source='gui/Difficulty.cxx' object='Difficulty.obj' libtool=no \
#	depfile='$(DEPDIR)/Difficulty.Po' tmpdepfile='$(DEPDIR)/Difficulty.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o Difficulty.obj `if test -f 'gui/Difficulty.cxx'; then $(CYGPATH_W) 'gui/Difficulty.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/Difficulty.cxx'; fi`

CharSel.o: gui/CharSel.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CharSel.o -MD -MP -MF "$(DEPDIR)/CharSel.Tpo" \
	  -c -o CharSel.o `test -f 'gui/CharSel.cxx' || echo '$(srcdir)/'`gui/CharSel.cxx; \
	then mv -f "$(DEPDIR)/CharSel.Tpo" "$(DEPDIR)/CharSel.Po"; \
	else rm -f "$(DEPDIR)/CharSel.Tpo"; exit 1; \
	fi
#	source='gui/CharSel.cxx' object='CharSel.o' libtool=no \
#	depfile='$(DEPDIR)/CharSel.Po' tmpdepfile='$(DEPDIR)/CharSel.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CharSel.o `test -f 'gui/CharSel.cxx' || echo '$(srcdir)/'`gui/CharSel.cxx

CharSel.obj: gui/CharSel.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT CharSel.obj -MD -MP -MF "$(DEPDIR)/CharSel.Tpo" \
	  -c -o CharSel.obj `if test -f 'gui/CharSel.cxx'; then $(CYGPATH_W) 'gui/CharSel.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/CharSel.cxx'; fi`; \
	then mv -f "$(DEPDIR)/CharSel.Tpo" "$(DEPDIR)/CharSel.Po"; \
	else rm -f "$(DEPDIR)/CharSel.Tpo"; exit 1; \
	fi
#	source='gui/CharSel.cxx' object='CharSel.obj' libtool=no \
#	depfile='$(DEPDIR)/CharSel.Po' tmpdepfile='$(DEPDIR)/CharSel.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o CharSel.obj `if test -f 'gui/CharSel.cxx'; then $(CYGPATH_W) 'gui/CharSel.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/CharSel.cxx'; fi`

MainMenu.o: gui/MainMenu.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MainMenu.o -MD -MP -MF "$(DEPDIR)/MainMenu.Tpo" \
	  -c -o MainMenu.o `test -f 'gui/MainMenu.cxx' || echo '$(srcdir)/'`gui/MainMenu.cxx; \
	then mv -f "$(DEPDIR)/MainMenu.Tpo" "$(DEPDIR)/MainMenu.Po"; \
	else rm -f "$(DEPDIR)/MainMenu.Tpo"; exit 1; \
	fi
#	source='gui/MainMenu.cxx' object='MainMenu.o' libtool=no \
#	depfile='$(DEPDIR)/MainMenu.Po' tmpdepfile='$(DEPDIR)/MainMenu.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MainMenu.o `test -f 'gui/MainMenu.cxx' || echo '$(srcdir)/'`gui/MainMenu.cxx

MainMenu.obj: gui/MainMenu.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT MainMenu.obj -MD -MP -MF "$(DEPDIR)/MainMenu.Tpo" \
	  -c -o MainMenu.obj `if test -f 'gui/MainMenu.cxx'; then $(CYGPATH_W) 'gui/MainMenu.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/MainMenu.cxx'; fi`; \
	then mv -f "$(DEPDIR)/MainMenu.Tpo" "$(DEPDIR)/MainMenu.Po"; \
	else rm -f "$(DEPDIR)/MainMenu.Tpo"; exit 1; \
	fi
#	source='gui/MainMenu.cxx' object='MainMenu.obj' libtool=no \
#	depfile='$(DEPDIR)/MainMenu.Po' tmpdepfile='$(DEPDIR)/MainMenu.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o MainMenu.obj `if test -f 'gui/MainMenu.cxx'; then $(CYGPATH_W) 'gui/MainMenu.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/MainMenu.cxx'; fi`

SingleWindowMenu.o: gui/SingleWindowMenu.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SingleWindowMenu.o -MD -MP -MF "$(DEPDIR)/SingleWindowMenu.Tpo" \
	  -c -o SingleWindowMenu.o `test -f 'gui/SingleWindowMenu.cxx' || echo '$(srcdir)/'`gui/SingleWindowMenu.cxx; \
	then mv -f "$(DEPDIR)/SingleWindowMenu.Tpo" "$(DEPDIR)/SingleWindowMenu.Po"; \
	else rm -f "$(DEPDIR)/SingleWindowMenu.Tpo"; exit 1; \
	fi
#	source='gui/SingleWindowMenu.cxx' object='SingleWindowMenu.o' libtool=no \
#	depfile='$(DEPDIR)/SingleWindowMenu.Po' tmpdepfile='$(DEPDIR)/SingleWindowMenu.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SingleWindowMenu.o `test -f 'gui/SingleWindowMenu.cxx' || echo '$(srcdir)/'`gui/SingleWindowMenu.cxx

SingleWindowMenu.obj: gui/SingleWindowMenu.cxx
	if $(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -MT SingleWindowMenu.obj -MD -MP -MF "$(DEPDIR)/SingleWindowMenu.Tpo" \
	  -c -o SingleWindowMenu.obj `if test -f 'gui/SingleWindowMenu.cxx'; then $(CYGPATH_W) 'gui/SingleWindowMenu.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/SingleWindowMenu.cxx'; fi`; \
	then mv -f "$(DEPDIR)/SingleWindowMenu.Tpo" "$(DEPDIR)/SingleWindowMenu.Po"; \
	else rm -f "$(DEPDIR)/SingleWindowMenu.Tpo"; exit 1; \
	fi
#	source='gui/SingleWindowMenu.cxx' object='SingleWindowMenu.obj' libtool=no \
#	depfile='$(DEPDIR)/SingleWindowMenu.Po' tmpdepfile='$(DEPDIR)/SingleWindowMenu.TPo' \
#	$(CXXDEPMODE) $(depcomp) \
#	$(CXX) $(DEFS) $(DEFAULT_INCLUDES) $(INCLUDES) $(AM_CPPFLAGS) $(CPPFLAGS) $(AM_CXXFLAGS) $(CXXFLAGS) -c -o SingleWindowMenu.obj `if test -f 'gui/SingleWindowMenu.cxx'; then $(CYGPATH_W) 'gui/SingleWindowMenu.cxx'; else $(CYGPATH_W) '$(srcdir)/gui/SingleWindowMenu.cxx'; fi`
uninstall-info-am:

ETAGS = etags
ETAGSFLAGS =

CTAGS = ctags
CTAGSFLAGS =

tags: TAGS

ID: $(HEADERS) $(SOURCES) $(LISP) $(TAGS_FILES)
	list='$(SOURCES) $(HEADERS) $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	mkid -fID $$unique

TAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(ETAGS_ARGS)$$tags$$unique" \
	  || $(ETAGS) $(ETAGSFLAGS) $(AM_ETAGSFLAGS) $(ETAGS_ARGS) \
	     $$tags $$unique

ctags: CTAGS
CTAGS:  $(HEADERS) $(SOURCES)  $(TAGS_DEPENDENCIES) \
		$(TAGS_FILES) $(LISP)
	tags=; \
	here=`pwd`; \
	list='$(SOURCES) $(HEADERS)  $(LISP) $(TAGS_FILES)'; \
	unique=`for i in $$list; do \
	    if test -f "$$i"; then echo $$i; else echo $(srcdir)/$$i; fi; \
	  done | \
	  $(AWK) '    { files[$$0] = 1; } \
	       END { for (i in files) print i; }'`; \
	test -z "$(CTAGS_ARGS)$$tags$$unique" \
	  || $(CTAGS) $(CTAGSFLAGS) $(AM_CTAGSFLAGS) $(CTAGS_ARGS) \
	     $$tags $$unique

GTAGS:
	here=`$(am__cd) $(top_builddir) && pwd` \
	  && cd $(top_srcdir) \
	  && gtags -i $(GTAGS_ARGS) $$here

distclean-tags:
	-rm -f TAGS ID GTAGS GRTAGS GSYMS GPATH tags
DISTFILES = $(DIST_COMMON) $(DIST_SOURCES) $(TEXINFOS) $(EXTRA_DIST)

top_distdir = ..
distdir = $(top_distdir)/$(PACKAGE)-$(VERSION)

distdir: $(DISTFILES)
	@srcdirstrip=`echo "$(srcdir)" | sed 's|.|.|g'`; \
	topsrcdirstrip=`echo "$(top_srcdir)" | sed 's|.|.|g'`; \
	list='$(DISTFILES)'; for file in $$list; do \
	  case $$file in \
	    $(srcdir)/*) file=`echo "$$file" | sed "s|^$$srcdirstrip/||"`;; \
	    $(top_srcdir)/*) file=`echo "$$file" | sed "s|^$$topsrcdirstrip/|$(top_builddir)/|"`;; \
	  esac; \
	  if test -f $$file || test -d $$file; then d=.; else d=$(srcdir); fi; \
	  dir=`echo "$$file" | sed -e 's,/[^/]*$$,,'`; \
	  if test "$$dir" != "$$file" && test "$$dir" != "."; then \
	    dir="/$$dir"; \
	    $(mkinstalldirs) "$(distdir)$$dir"; \
	  else \
	    dir=''; \
	  fi; \
	  if test -d $$d/$$file; then \
	    if test -d $(srcdir)/$$file && test $$d != $(srcdir); then \
	      cp -pR $(srcdir)/$$file $(distdir)$$dir || exit 1; \
	    fi; \
	    cp -pR $$d/$$file $(distdir)$$dir || exit 1; \
	  else \
	    test -f $(distdir)/$$file \
	    || cp -p $$d/$$file $(distdir)/$$file \
	    || exit 1; \
	  fi; \
	done
check-am: all-am
check: check-am
all-am: Makefile $(PROGRAMS)

installdirs:
	$(mkinstalldirs) $(DESTDIR)$(bindir)
install: install-am
install-exec: install-exec-am
install-data: install-data-am
uninstall: uninstall-am

install-am: all-am
	@$(MAKE) $(AM_MAKEFLAGS) install-exec-am install-data-am

installcheck: installcheck-am
install-strip:
	$(MAKE) $(AM_MAKEFLAGS) INSTALL_PROGRAM="$(INSTALL_STRIP_PROGRAM)" \
	  install_sh_PROGRAM="$(INSTALL_STRIP_PROGRAM)" INSTALL_STRIP_FLAG=-s \
	  `test -z '$(STRIP)' || \
	    echo "INSTALL_PROGRAM_ENV=STRIPPROG='$(STRIP)'"` install
mostlyclean-generic:

clean-generic:

distclean-generic:
	-rm -f $(CONFIG_CLEAN_FILES)

maintainer-clean-generic:
	@echo "This command is intended for maintainers to use"
	@echo "it deletes files that may require special tools to rebuild."
clean: clean-am

clean-am: clean-binPROGRAMS clean-generic mostlyclean-am

distclean: distclean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
distclean-am: clean-am distclean-compile distclean-generic \
	distclean-tags

dvi: dvi-am

dvi-am:

info: info-am

info-am:

install-data-am:

install-exec-am: install-binPROGRAMS

install-info: install-info-am

install-man:

installcheck-am:

maintainer-clean: maintainer-clean-am
	-rm -rf ./$(DEPDIR)
	-rm -f Makefile
maintainer-clean-am: distclean-am maintainer-clean-generic

mostlyclean: mostlyclean-am

mostlyclean-am: mostlyclean-compile mostlyclean-generic

pdf: pdf-am

pdf-am:

ps: ps-am

ps-am:

uninstall-am: uninstall-binPROGRAMS uninstall-info-am

.PHONY: CTAGS GTAGS all all-am check check-am clean clean-binPROGRAMS \
	clean-generic ctags distclean distclean-compile \
	distclean-generic distclean-tags distdir dvi dvi-am info \
	info-am install install-am install-binPROGRAMS install-data \
	install-data-am install-exec install-exec-am install-info \
	install-info-am install-man install-strip installcheck \
	installcheck-am installdirs maintainer-clean \
	maintainer-clean-generic mostlyclean mostlyclean-compile \
	mostlyclean-generic pdf pdf-am ps ps-am tags uninstall \
	uninstall-am uninstall-binPROGRAMS uninstall-info-am

# Tell versions [3.59,3.63) of GNU make to not export all variables.
# Otherwise a system limit (for SysV at least) may be exceeded.
.NOEXPORT:
